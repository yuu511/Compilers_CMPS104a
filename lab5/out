==12028== Memcheck, a memory error detector
==12028== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==12028== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==12028== Command: ./oc ./examples/test.oc
==12028== 
==12028== Invalid read of size 8
==12028==    at 0x11ED0E: p_binop(astree*, std::vector<ac3*, std::allocator<ac3*> >*, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (3ac.cpp:202)
==12028==    by 0x11EF50: p_operator(astree*, std::vector<ac3*, std::allocator<ac3*> >*, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (3ac.cpp:223)
==12028==    by 0x11E8CA: p_eq(astree*, std::vector<ac3*, std::allocator<ac3*> >*, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (3ac.cpp:159)
==12028==    by 0x11EF88: p_operator(astree*, std::vector<ac3*, std::allocator<ac3*> >*, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (3ac.cpp:227)
==12028==    by 0x11F6C4: parse_initialization(astree*, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, symbol*, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const* const, symbol*> > >*) (3ac.cpp:368)
==12028==    by 0x11F99A: ac_function(astree*, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, symbol*, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const* const, symbol*> > >*) (3ac.cpp:405)
==12028==    by 0x11F95E: ac_function(astree*, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, symbol*, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const* const, symbol*> > >*) (3ac.cpp:401)
==12028==    by 0x120630: ac_traverse(astree*, all_tables*, _IO_FILE*) (3ac.cpp:524)
==12028==    by 0x12074F: emit_3ac(astree*, all_tables*, _IO_FILE*) (3ac.cpp:548)
==12028==    by 0x1258A1: main (main.cpp:185)
==12028==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==12028== 
==12028== 
==12028== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==12028==  Access not within mapped region at address 0x0
==12028==    at 0x11ED0E: p_binop(astree*, std::vector<ac3*, std::allocator<ac3*> >*, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (3ac.cpp:202)
==12028==    by 0x11EF50: p_operator(astree*, std::vector<ac3*, std::allocator<ac3*> >*, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (3ac.cpp:223)
==12028==    by 0x11E8CA: p_eq(astree*, std::vector<ac3*, std::allocator<ac3*> >*, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (3ac.cpp:159)
==12028==    by 0x11EF88: p_operator(astree*, std::vector<ac3*, std::allocator<ac3*> >*, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (3ac.cpp:227)
==12028==    by 0x11F6C4: parse_initialization(astree*, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, symbol*, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const* const, symbol*> > >*) (3ac.cpp:368)
==12028==    by 0x11F99A: ac_function(astree*, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, symbol*, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const* const, symbol*> > >*) (3ac.cpp:405)
==12028==    by 0x11F95E: ac_function(astree*, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, symbol*, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const* const, symbol*> > >*) (3ac.cpp:401)
==12028==    by 0x120630: ac_traverse(astree*, all_tables*, _IO_FILE*) (3ac.cpp:524)
==12028==    by 0x12074F: emit_3ac(astree*, all_tables*, _IO_FILE*) (3ac.cpp:548)
==12028==    by 0x1258A1: main (main.cpp:185)
==12028==  If you believe this happened as a result of a stack
==12028==  overflow in your program's main thread (unlikely but
==12028==  possible), you can try to increase the size of the
==12028==  main thread stack using the --main-stacksize= flag.
==12028==  The main thread stack size used in this run was 8388608.
==12028== 
==12028== HEAP SUMMARY:
==12028==     in use at exit: 37,145 bytes in 307 blocks
==12028==   total heap usage: 449 allocs, 142 frees, 131,431 bytes allocated
==12028== 
==12028== LEAK SUMMARY:
==12028==    definitely lost: 144 bytes in 2 blocks
==12028==    indirectly lost: 320 bytes in 10 blocks
==12028==      possibly lost: 0 bytes in 0 blocks
==12028==    still reachable: 36,681 bytes in 295 blocks
==12028==         suppressed: 0 bytes in 0 blocks
==12028== Rerun with --leak-check=full to see details of leaked memory
==12028== 
==12028== For counts of detected and suppressed errors, rerun with: -v
==12028== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

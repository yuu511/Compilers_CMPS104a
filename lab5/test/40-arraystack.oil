.struct stack
.field int top
.field ptr data
.field int size
.end 
new_stack: .function struct stack 
           .param int size
           .local struct stack stack
           stack = call malloc(sizeof struct stack)  
           $t0:p = size * sizeof ptr
           -> = call malloc($t0:p)  
           stack->stack.size = size  
           $t1:i = -1  
           stack->stack.top = $t1:i  
           return stack
           return
           .end
push:      .function 
           .param struct stack stack
           .param ptr str
.if0:      $t2:i = stack->stack.top  
           $t4:i = stack->stack.size  
           $t3:i = $t4:i - 1
           $t1:i = $t2:i < $t3:i
           $t0:i = not $t1:i  
           goto .fi0 if not $t0:i  
.th0:      call fail("stack->top < stack->size - 1","40-arraystack.oc",22)  
.fi0:
           $t6:i = stack->stack.top  
           $t5:i = $t6:i + 1
           stack->stack.top = $t5:i  
           $t7:p = stack->stack.data  
           $t8:i = stack->stack.top  
           $t7:p[$t8:i * :c] = str  
           return
           .end
pop:       .function ptr 
           .param struct stack stack
           .local ptr tmp
           $t1:p = stack->stack.data  
           $t2:i = stack->stack.top  
           $t0:c = $t1:p[$t2:i * :c]  
           tmp = $t0:c  
.if1:      $t5:i = stack->stack.top  
           $t6:i = -1  
           $t4:i = $t5:i != $t6:i
           $t3:i = not $t4:i  
           goto .fi1 if not $t3:i  
.th1:      call fail("stack->top != EMPTY","40-arraystack.oc",29)  
.fi1:
           $t8:i = stack->stack.top  
           $t7:i = $t8:i - 1
           stack->stack.top = $t7:i  
           return tmp
           return
           .end
empty:     .function int 
           .param struct stack stack
           $t1:i = stack->stack.top  
           $t2:i = -1  
           $t0:i = $t1:i == $t2:i
           return $t0:i
           return
           .end
main:      .function int 
           .param int argc
           .param ptr argv
           .local struct stack stack
           .local int argi
           $t0:p = call new_stack(100)  
           stack = $t0:p  
           argi = 0  
.wh0:      goto .od0 if argi > argc
.do0:      $t1:c = argv[argi * :c]  
           call push(stack,$t1:c)  
           $t2:i = argi + 1
           argi = $t2:i  
           goto .wh0  
.od0
.wh1:      $t4:i = call empty(stack)  
           $t3:i = not $t4:i  
           goto .od1 if not $t3:i  
.do1:      $t5:p = call pop(stack)  
           call putstr($t5:p)  
           call putchr('\n')  
           goto .wh1  
.od1
           return 0
           return
           .end

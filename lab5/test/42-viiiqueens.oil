board:     .global ptr nullptr
is_safe:   .function int 
           .param int newcol
           .local int col
           .local int diagonal
           col = 0  
           diagonal = 0  
.wh0:      goto .od0 if col > newcol
.do0:
.if0:      $t0:i = board[col * :i]  
           $t1:i = board[newcol * :i]  
           goto .fi0 if $t0:i != $t1:i
.th0:      return 0
.fi0:
           $t3:i = board[col * :i]  
           $t4:i = board[newcol * :i]  
           $t2:i = $t3:i - $t4:i
           diagonal = $t2:i  
.if1:      $t5:i = col - newcol
           goto .fi1 if diagonal != $t5:i
.th1:      return 0
.fi1:
.if2:      $t6:i = newcol - col
           goto .fi2 if diagonal != $t6:i
.th2:      return 0
.fi2:
           $t7:i = col + 1
           col = $t7:i  
           goto .wh0  
.od0
           return 1
           return
           .end
printqueens: .function 
           .local int col
           col = 0  
.wh1:      goto .od1 if col > 8
.do1:      $t1:i = board[col * :i]  
           $t0:i = $t1:i + '1'
           call putchr($t0:i)  
           $t2:i = col + 1
           col = $t2:i  
           goto .wh1  
.od1
           call putchr('\n')  
           return
           .end
queens:    .function 
           .param int newcol
           .local int row
           row = 0  
.if3:      goto .el3 if newcol != 8
.th3:      call printqueens()  
.fi3       goto   
.el3:
.wh2:      goto .od2 if row > 8
.do2:      board[newcol * :i] = row  
.if4:      $t0:i = call is_safe(newcol)  
           goto .fi4 if not $t0:i  
.th4:      $t1:i = newcol + 1
           call queens($t1:i)  
.fi4:
           $t2:i = row + 1
           row = $t2:i  
           goto .wh2  
.od2
.fi3:
           return
           .end
main:      .function int 
           $t0:p = 8 * sizeof int
           board = call malloc($t0:p)  
           call queens(0)  
           return 0
           return
           .end

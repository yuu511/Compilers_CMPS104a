Terminals unused in grammar

   TOK_LT
   TOK_GT
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_INITDECL
   TOK_TYPE_ID
   TOK_INDEX
   TOK_FUNCTION
   TOK_PARAM


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: sargs '}' ';'
    9          | TOK_STRUCT TOK_IDENT '{' '}' ';'

   10 sargs: sargs type TOK_IDENT ';'
   11      | TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';'

   12 statement: vardecl
   13          | block
   14          | while
   15          | ifelse
   16          | return
   17          | ';'
   18          | expr ';'

   19 vardecl: type TOK_IDENT '=' expr ';'
   20        | type TOK_IDENT ';'

   21 type: plaintype
   22     | TOK_ARRAY '<' plaintype '>'

   23 plaintype: TOK_INT
   24          | TOK_VOID
   25          | TOK_STRING
   26          | TOK_PTR '<' TOK_STRUCT TOK_IDENT '>'

   27 expr: expr '=' expr
   28     | expr '+' expr
   29     | expr '-' expr
   30     | expr '*' expr
   31     | expr '/' expr
   32     | expr '%' expr
   33     | expr TOK_EQ expr
   34     | expr TOK_NE expr
   35     | expr TOK_LE expr
   36     | expr TOK_GE expr
   37     | expr '<' expr
   38     | expr '>' expr
   39     | '-' expr
   40     | '+' expr
   41     | TOK_NOT expr
   42     | allocator
   43     | '(' expr ')'
   44     | call
   45     | variable
   46     | constant

   47 allocator: TOK_ALLOC '<' TOK_STRING '>' '(' expr ')'
   48          | TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   49          | TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

   50 call: cargs ')'
   51     | TOK_IDENT '(' ')'

   52 cargs: TOK_IDENT '(' expr
   53      | cargs ',' expr

   54 variable: TOK_IDENT
   55         | expr '[' expr ']'
   56         | expr TOK_ARROW TOK_IDENT

   57 constant: TOK_INTCON
   58         | TOK_CHARCON
   59         | TOK_STRINGCON
   60         | TOK_NULLPTR

   61 block: bargs '}'
   62      | '{' '}'

   63 bargs: '{' statement
   64      | bargs statement

   65 while: TOK_WHILE '(' expr ')' statement

   66 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   67       | TOK_IF '(' expr ')' statement

   68 return: TOK_RETURN expr ';'
   69       | TOK_RETURN ';'

   70 function: type TOK_IDENT fargs2 ')' fend
   71         | type TOK_IDENT '(' ')' fend

   72 fargs2: '(' type TOK_IDENT
   73       | fargs2 ',' type TOK_IDENT

   74 fend: ';'
   75     | block


Terminals, with rules where they appear

$end (0) 0
'%' (37) 32
'(' (40) 43 47 48 49 51 52 65 66 67 71 72
')' (41) 43 47 48 49 50 51 65 66 67 70 71
'*' (42) 30
'+' (43) 28 40
',' (44) 53 73
'-' (45) 29 39
'/' (47) 31
';' (59) 6 8 9 10 11 17 18 19 20 68 69 74
'<' (60) 22 26 37 47 48 49
'=' (61) 19 27
'>' (62) 22 26 38 47 48 49
'[' (91) 55
']' (93) 55
'{' (123) 9 11 62 63
'}' (125) 5 8 9 61 62
error (256) 5 6
TOK_VOID (258) 24
TOK_INT (259) 23
TOK_STRING (260) 25 47
TOK_IF (261) 66 67
TOK_ELSE (262) 66
TOK_WHILE (263) 65
TOK_RETURN (264) 68 69
TOK_STRUCT (265) 9 11 26 48
TOK_NULLPTR (266) 60
TOK_ARRAY (267) 22 49
TOK_ARROW (268) 56
TOK_ALLOC (269) 47 48 49
TOK_PTR (270) 26
TOK_EQ (271) 33
TOK_NE (272) 34
TOK_LT (273)
TOK_LE (274) 35
TOK_GT (275)
TOK_GE (276) 36
TOK_NOT (277) 41
TOK_IDENT (278) 9 10 11 19 20 26 48 51 52 54 56 70 71 72 73
TOK_INTCON (279) 57
TOK_CHARCON (280) 58
TOK_STRINGCON (281) 59
TOK_ROOT (282)
TOK_BLOCK (283)
TOK_CALL (284)
TOK_INITDECL (285)
TOK_TYPE_ID (286)
TOK_INDEX (287)
TOK_FUNCTION (288)
TOK_PARAM (289)
U_PLUS (290)
U_MINUS (291)


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
start (54)
    on left: 1, on right: 0
program (55)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (56)
    on left: 8 9, on right: 2
sargs (57)
    on left: 10 11, on right: 8 10
statement (58)
    on left: 12 13 14 15 16 17 18, on right: 4 63 64 65 66 67
vardecl (59)
    on left: 19 20, on right: 12
type (60)
    on left: 21 22, on right: 10 11 19 20 70 71 72 73
plaintype (61)
    on left: 23 24 25 26, on right: 21 22 49
expr (62)
    on left: 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
    45 46, on right: 18 19 27 28 29 30 31 32 33 34 35 36 37 38 39 40
    41 43 47 49 52 53 55 56 65 66 67 68
allocator (63)
    on left: 47 48 49, on right: 42
call (64)
    on left: 50 51, on right: 44
cargs (65)
    on left: 52 53, on right: 50 53
variable (66)
    on left: 54 55 56, on right: 45
constant (67)
    on left: 57 58 59 60, on right: 46
block (68)
    on left: 61 62, on right: 13 75
bargs (69)
    on left: 63 64, on right: 61 64
while (70)
    on left: 65, on right: 14
ifelse (71)
    on left: 66 67, on right: 15
return (72)
    on left: 68 69, on right: 16
function (73)
    on left: 70 71, on right: 3
fargs2 (74)
    on left: 72 73, on right: 70 73
fend (75)
    on left: 74 75, on right: 70 71


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_STRUCT     shift, and go to state 11
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23
    ';'            shift, and go to state 24
    '{'            shift, and go to state 25

    $end  reduce using rule 1 (start)

    structdef  go to state 26
    sargs      go to state 27
    statement  go to state 28
    vardecl    go to state 29
    type       go to state 30
    plaintype  go to state 31
    expr       go to state 32
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37
    block      go to state 38
    bargs      go to state 39
    while      go to state 40
    ifelse     go to state 41
    return     go to state 42
    function   go to state 43


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 44
    ';'  shift, and go to state 45


State 5

   24 plaintype: TOK_VOID .

    $default  reduce using rule 24 (plaintype)


State 6

   23 plaintype: TOK_INT .

    $default  reduce using rule 23 (plaintype)


State 7

   25 plaintype: TOK_STRING .

    $default  reduce using rule 25 (plaintype)


State 8

   66 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   67       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 46


State 9

   65 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 47


State 10

   68 return: TOK_RETURN . expr ';'
   69       | TOK_RETURN . ';'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23
    ';'            shift, and go to state 48

    expr       go to state 49
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 11

    9 structdef: TOK_STRUCT . TOK_IDENT '{' '}' ';'
   11 sargs: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 50


State 12

   60 constant: TOK_NULLPTR .

    $default  reduce using rule 60 (constant)


State 13

   22 type: TOK_ARRAY . '<' plaintype '>'

    '<'  shift, and go to state 51


State 14

   47 allocator: TOK_ALLOC . '<' TOK_STRING '>' '(' expr ')'
   48          | TOK_ALLOC . '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   49          | TOK_ALLOC . '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 52


State 15

   26 plaintype: TOK_PTR . '<' TOK_STRUCT TOK_IDENT '>'

    '<'  shift, and go to state 53


State 16

   41 expr: TOK_NOT . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 54
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 17

   51 call: TOK_IDENT . '(' ')'
   52 cargs: TOK_IDENT . '(' expr
   54 variable: TOK_IDENT .

    '('  shift, and go to state 55

    $default  reduce using rule 54 (variable)


State 18

   57 constant: TOK_INTCON .

    $default  reduce using rule 57 (constant)


State 19

   58 constant: TOK_CHARCON .

    $default  reduce using rule 58 (constant)


State 20

   59 constant: TOK_STRINGCON .

    $default  reduce using rule 59 (constant)


State 21

   40 expr: '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 56
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 22

   39 expr: '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 57
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 23

   43 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 58
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 24

   17 statement: ';' .

    $default  reduce using rule 17 (statement)


State 25

   62 block: '{' . '}'
   63 bargs: '{' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23
    '}'            shift, and go to state 59
    ';'            shift, and go to state 24
    '{'            shift, and go to state 25

    statement  go to state 60
    vardecl    go to state 29
    type       go to state 61
    plaintype  go to state 31
    expr       go to state 32
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37
    block      go to state 38
    bargs      go to state 39
    while      go to state 40
    ifelse     go to state 41
    return     go to state 42


State 26

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 27

    8 structdef: sargs . '}' ';'
   10 sargs: sargs . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    '}'         shift, and go to state 62

    type       go to state 63
    plaintype  go to state 31


State 28

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 29

   12 statement: vardecl .

    $default  reduce using rule 12 (statement)


State 30

   19 vardecl: type . TOK_IDENT '=' expr ';'
   20        | type . TOK_IDENT ';'
   70 function: type . TOK_IDENT fargs2 ')' fend
   71         | type . TOK_IDENT '(' ')' fend

    TOK_IDENT  shift, and go to state 64


State 31

   21 type: plaintype .

    $default  reduce using rule 21 (type)


State 32

   18 statement: expr . ';'
   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    '='        shift, and go to state 70
    '<'        shift, and go to state 71
    '>'        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78
    ';'        shift, and go to state 79


State 33

   42 expr: allocator .

    $default  reduce using rule 42 (expr)


State 34

   44 expr: call .

    $default  reduce using rule 44 (expr)


State 35

   50 call: cargs . ')'
   53 cargs: cargs . ',' expr

    ')'  shift, and go to state 80
    ','  shift, and go to state 81


State 36

   45 expr: variable .

    $default  reduce using rule 45 (expr)


State 37

   46 expr: constant .

    $default  reduce using rule 46 (expr)


State 38

   13 statement: block .

    $default  reduce using rule 13 (statement)


State 39

   61 block: bargs . '}'
   64 bargs: bargs . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23
    '}'            shift, and go to state 82
    ';'            shift, and go to state 24
    '{'            shift, and go to state 25

    statement  go to state 83
    vardecl    go to state 29
    type       go to state 61
    plaintype  go to state 31
    expr       go to state 32
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37
    block      go to state 38
    bargs      go to state 39
    while      go to state 40
    ifelse     go to state 41
    return     go to state 42


State 40

   14 statement: while .

    $default  reduce using rule 14 (statement)


State 41

   15 statement: ifelse .

    $default  reduce using rule 15 (statement)


State 42

   16 statement: return .

    $default  reduce using rule 16 (statement)


State 43

    3 program: program function .

    $default  reduce using rule 3 (program)


State 44

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 45

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 46

   66 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   67       | TOK_IF '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 84
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 47

   65 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 85
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 48

   69 return: TOK_RETURN ';' .

    $default  reduce using rule 69 (return)


State 49

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT
   68 return: TOK_RETURN expr . ';'

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    '='        shift, and go to state 70
    '<'        shift, and go to state 71
    '>'        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78
    ';'        shift, and go to state 86


State 50

    9 structdef: TOK_STRUCT TOK_IDENT . '{' '}' ';'
   11 sargs: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT ';'

    '{'  shift, and go to state 87


State 51

   22 type: TOK_ARRAY '<' . plaintype '>'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 15

    plaintype  go to state 88


State 52

   47 allocator: TOK_ALLOC '<' . TOK_STRING '>' '(' expr ')'
   48          | TOK_ALLOC '<' . TOK_STRUCT TOK_IDENT '>' '(' ')'
   49          | TOK_ALLOC '<' . TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    TOK_STRING  shift, and go to state 89
    TOK_STRUCT  shift, and go to state 90
    TOK_ARRAY   shift, and go to state 91


State 53

   26 plaintype: TOK_PTR '<' . TOK_STRUCT TOK_IDENT '>'

    TOK_STRUCT  shift, and go to state 92


State 54

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   41     | TOK_NOT expr .
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '['        shift, and go to state 78

    $default  reduce using rule 41 (expr)


State 55

   51 call: TOK_IDENT '(' . ')'
   52 cargs: TOK_IDENT '(' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23
    ')'            shift, and go to state 93

    expr       go to state 94
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 56

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   40     | '+' expr .
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '['        shift, and go to state 78

    $default  reduce using rule 40 (expr)


State 57

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   39     | '-' expr .
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '['        shift, and go to state 78

    $default  reduce using rule 39 (expr)


State 58

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   43     | '(' expr . ')'
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    '='        shift, and go to state 70
    '<'        shift, and go to state 71
    '>'        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78
    ')'        shift, and go to state 95


State 59

   62 block: '{' '}' .

    $default  reduce using rule 62 (block)


State 60

   63 bargs: '{' statement .

    $default  reduce using rule 63 (bargs)


State 61

   19 vardecl: type . TOK_IDENT '=' expr ';'
   20        | type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 96


State 62

    8 structdef: sargs '}' . ';'

    ';'  shift, and go to state 97


State 63

   10 sargs: sargs type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 98


State 64

   19 vardecl: type TOK_IDENT . '=' expr ';'
   20        | type TOK_IDENT . ';'
   70 function: type TOK_IDENT . fargs2 ')' fend
   71         | type TOK_IDENT . '(' ')' fend

    '='  shift, and go to state 99
    '('  shift, and go to state 100
    ';'  shift, and go to state 101

    fargs2  go to state 102


State 65

   56 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 103


State 66

   33 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 104
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 67

   34 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 105
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 68

   35 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 106
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 69

   36 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 107
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 70

   27 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 108
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 71

   37 expr: expr '<' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 109
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 72

   38 expr: expr '>' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 110
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 73

   28 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 111
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 74

   29 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 112
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 75

   30 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 113
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 76

   31 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 114
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 77

   32 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 115
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 78

   55 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 116
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 79

   18 statement: expr ';' .

    $default  reduce using rule 18 (statement)


State 80

   50 call: cargs ')' .

    $default  reduce using rule 50 (call)


State 81

   53 cargs: cargs ',' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 117
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 82

   61 block: bargs '}' .

    $default  reduce using rule 61 (block)


State 83

   64 bargs: bargs statement .

    $default  reduce using rule 64 (bargs)


State 84

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT
   66 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   67       | TOK_IF '(' expr . ')' statement

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    '='        shift, and go to state 70
    '<'        shift, and go to state 71
    '>'        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78
    ')'        shift, and go to state 118


State 85

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT
   65 while: TOK_WHILE '(' expr . ')' statement

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    '='        shift, and go to state 70
    '<'        shift, and go to state 71
    '>'        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78
    ')'        shift, and go to state 119


State 86

   68 return: TOK_RETURN expr ';' .

    $default  reduce using rule 68 (return)


State 87

    9 structdef: TOK_STRUCT TOK_IDENT '{' . '}' ';'
   11 sargs: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    '}'         shift, and go to state 120

    type       go to state 121
    plaintype  go to state 31


State 88

   22 type: TOK_ARRAY '<' plaintype . '>'

    '>'  shift, and go to state 122


State 89

   47 allocator: TOK_ALLOC '<' TOK_STRING . '>' '(' expr ')'

    '>'  shift, and go to state 123


State 90

   48 allocator: TOK_ALLOC '<' TOK_STRUCT . TOK_IDENT '>' '(' ')'

    TOK_IDENT  shift, and go to state 124


State 91

   49 allocator: TOK_ALLOC '<' TOK_ARRAY . '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 125


State 92

   26 plaintype: TOK_PTR '<' TOK_STRUCT . TOK_IDENT '>'

    TOK_IDENT  shift, and go to state 126


State 93

   51 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 51 (call)


State 94

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   52 cargs: TOK_IDENT '(' expr .
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    '='        shift, and go to state 70
    '<'        shift, and go to state 71
    '>'        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78

    $default  reduce using rule 52 (cargs)


State 95

   43 expr: '(' expr ')' .

    $default  reduce using rule 43 (expr)


State 96

   19 vardecl: type TOK_IDENT . '=' expr ';'
   20        | type TOK_IDENT . ';'

    '='  shift, and go to state 99
    ';'  shift, and go to state 101


State 97

    8 structdef: sargs '}' ';' .

    $default  reduce using rule 8 (structdef)


State 98

   10 sargs: sargs type TOK_IDENT . ';'

    ';'  shift, and go to state 127


State 99

   19 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 128
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 100

   71 function: type TOK_IDENT '(' . ')' fend
   72 fargs2: '(' . type TOK_IDENT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    ')'         shift, and go to state 129

    type       go to state 130
    plaintype  go to state 31


State 101

   20 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 20 (vardecl)


State 102

   70 function: type TOK_IDENT fargs2 . ')' fend
   73 fargs2: fargs2 . ',' type TOK_IDENT

    ')'  shift, and go to state 131
    ','  shift, and go to state 132


State 103

   56 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 56 (variable)


State 104

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   33     | expr TOK_EQ expr .
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78

    $default  reduce using rule 33 (expr)


State 105

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   34     | expr TOK_NE expr .
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78

    $default  reduce using rule 34 (expr)


State 106

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   35     | expr TOK_LE expr .
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78

    $default  reduce using rule 35 (expr)


State 107

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   36     | expr TOK_GE expr .
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78

    $default  reduce using rule 36 (expr)


State 108

   27 expr: expr . '=' expr
   27     | expr '=' expr .
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    '='        shift, and go to state 70
    '<'        shift, and go to state 71
    '>'        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78

    $default  reduce using rule 27 (expr)


State 109

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   37     | expr '<' expr .
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78

    $default  reduce using rule 37 (expr)


State 110

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   38     | expr '>' expr .
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78

    $default  reduce using rule 38 (expr)


State 111

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   28     | expr '+' expr .
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78

    $default  reduce using rule 28 (expr)


State 112

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   29     | expr '-' expr .
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78

    $default  reduce using rule 29 (expr)


State 113

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   30     | expr '*' expr .
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '['        shift, and go to state 78

    $default  reduce using rule 30 (expr)


State 114

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   31     | expr '/' expr .
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '['        shift, and go to state 78

    $default  reduce using rule 31 (expr)


State 115

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   32     | expr '%' expr .
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '['        shift, and go to state 78

    $default  reduce using rule 32 (expr)


State 116

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   55         | expr '[' expr . ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    '='        shift, and go to state 70
    '<'        shift, and go to state 71
    '>'        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78
    ']'        shift, and go to state 133


State 117

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   53 cargs: cargs ',' expr .
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    '='        shift, and go to state 70
    '<'        shift, and go to state 71
    '>'        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78

    $default  reduce using rule 53 (cargs)


State 118

   66 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   67       | TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23
    ';'            shift, and go to state 24
    '{'            shift, and go to state 25

    statement  go to state 134
    vardecl    go to state 29
    type       go to state 61
    plaintype  go to state 31
    expr       go to state 32
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37
    block      go to state 38
    bargs      go to state 39
    while      go to state 40
    ifelse     go to state 41
    return     go to state 42


State 119

   65 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23
    ';'            shift, and go to state 24
    '{'            shift, and go to state 25

    statement  go to state 135
    vardecl    go to state 29
    type       go to state 61
    plaintype  go to state 31
    expr       go to state 32
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37
    block      go to state 38
    bargs      go to state 39
    while      go to state 40
    ifelse     go to state 41
    return     go to state 42


State 120

    9 structdef: TOK_STRUCT TOK_IDENT '{' '}' . ';'

    ';'  shift, and go to state 136


State 121

   11 sargs: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 137


State 122

   22 type: TOK_ARRAY '<' plaintype '>' .

    $default  reduce using rule 22 (type)


State 123

   47 allocator: TOK_ALLOC '<' TOK_STRING '>' . '(' expr ')'

    '('  shift, and go to state 138


State 124

   48 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT . '>' '(' ')'

    '>'  shift, and go to state 139


State 125

   49 allocator: TOK_ALLOC '<' TOK_ARRAY '<' . plaintype '>' '>' '(' expr ')'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 15

    plaintype  go to state 140


State 126

   26 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT . '>'

    '>'  shift, and go to state 141


State 127

   10 sargs: sargs type TOK_IDENT ';' .

    $default  reduce using rule 10 (sargs)


State 128

   19 vardecl: type TOK_IDENT '=' expr . ';'
   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    '='        shift, and go to state 70
    '<'        shift, and go to state 71
    '>'        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78
    ';'        shift, and go to state 142


State 129

   71 function: type TOK_IDENT '(' ')' . fend

    ';'  shift, and go to state 143
    '{'  shift, and go to state 25

    block  go to state 144
    bargs  go to state 39
    fend   go to state 145


State 130

   72 fargs2: '(' type . TOK_IDENT

    TOK_IDENT  shift, and go to state 146


State 131

   70 function: type TOK_IDENT fargs2 ')' . fend

    ';'  shift, and go to state 143
    '{'  shift, and go to state 25

    block  go to state 144
    bargs  go to state 39
    fend   go to state 147


State 132

   73 fargs2: fargs2 ',' . type TOK_IDENT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15

    type       go to state 148
    plaintype  go to state 31


State 133

   55 variable: expr '[' expr ']' .

    $default  reduce using rule 55 (variable)


State 134

   66 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   67       | TOK_IF '(' expr ')' statement .

    TOK_ELSE  shift, and go to state 149

    $default  reduce using rule 67 (ifelse)


State 135

   65 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 65 (while)


State 136

    9 structdef: TOK_STRUCT TOK_IDENT '{' '}' ';' .

    $default  reduce using rule 9 (structdef)


State 137

   11 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . ';'

    ';'  shift, and go to state 150


State 138

   47 allocator: TOK_ALLOC '<' TOK_STRING '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 151
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 139

   48 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' . '(' ')'

    '('  shift, and go to state 152


State 140

   49 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype . '>' '>' '(' expr ')'

    '>'  shift, and go to state 153


State 141

   26 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT '>' .

    $default  reduce using rule 26 (plaintype)


State 142

   19 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 19 (vardecl)


State 143

   74 fend: ';' .

    $default  reduce using rule 74 (fend)


State 144

   75 fend: block .

    $default  reduce using rule 75 (fend)


State 145

   71 function: type TOK_IDENT '(' ')' fend .

    $default  reduce using rule 71 (function)


State 146

   72 fargs2: '(' type TOK_IDENT .

    $default  reduce using rule 72 (fargs2)


State 147

   70 function: type TOK_IDENT fargs2 ')' fend .

    $default  reduce using rule 70 (function)


State 148

   73 fargs2: fargs2 ',' type . TOK_IDENT

    TOK_IDENT  shift, and go to state 154


State 149

   66 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23
    ';'            shift, and go to state 24
    '{'            shift, and go to state 25

    statement  go to state 155
    vardecl    go to state 29
    type       go to state 61
    plaintype  go to state 31
    expr       go to state 32
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37
    block      go to state 38
    bargs      go to state 39
    while      go to state 40
    ifelse     go to state 41
    return     go to state 42


State 150

   11 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' .

    $default  reduce using rule 11 (sargs)


State 151

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   47 allocator: TOK_ALLOC '<' TOK_STRING '>' '(' expr . ')'
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    '='        shift, and go to state 70
    '<'        shift, and go to state 71
    '>'        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78
    ')'        shift, and go to state 156


State 152

   48 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' . ')'

    ')'  shift, and go to state 157


State 153

   49 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' . '>' '(' expr ')'

    '>'  shift, and go to state 158


State 154

   73 fargs2: fargs2 ',' type TOK_IDENT .

    $default  reduce using rule 73 (fargs2)


State 155

   66 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 66 (ifelse)


State 156

   47 allocator: TOK_ALLOC '<' TOK_STRING '>' '(' expr ')' .

    $default  reduce using rule 47 (allocator)


State 157

   48 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')' .

    $default  reduce using rule 48 (allocator)


State 158

   49 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' . '(' expr ')'

    '('  shift, and go to state 159


State 159

   49 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 160
    allocator  go to state 33
    call       go to state 34
    cargs      go to state 35
    variable   go to state 36
    constant   go to state 37


State 160

   27 expr: expr . '=' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . TOK_EQ expr
   34     | expr . TOK_NE expr
   35     | expr . TOK_LE expr
   36     | expr . TOK_GE expr
   37     | expr . '<' expr
   38     | expr . '>' expr
   49 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr . ')'
   55 variable: expr . '[' expr ']'
   56         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    '='        shift, and go to state 70
    '<'        shift, and go to state 71
    '>'        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 78
    ')'        shift, and go to state 161


State 161

   49 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')' .

    $default  reduce using rule 49 (allocator)

head	1.10;
access;
symbols;
locks;
comment	@// @;


1.10
date	2015.07.10.01.30.04;	author -;	state -;
branches;
next	1.9;

1.9
date	2015.07.10.01.25.23;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.07.09.21.52.13;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.07.09.21.29.59;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.07.09.21.08.58;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.07.09.02.21.19;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.07.09.00.45.16;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.07.08.21.57.35;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.07.08.21.45.09;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.07.08.21.39.44;	author -;	state -;
branches;
next	;


desc
@@


1.10
log
@-
@
text
@// $Id: utils.cpp,v 1.9 2015-07-09 18:25:23-07 - - $

#include <assert.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "syslib.h"
#include "utils.h"
#include "yylex.h"

bool lexer::interactive = true;
location lexer::lloc = {0, 1, 0};
size_t lexer::last_yyleng = 0;
vector<string> lexer::filenames;

astree* parser::root = nullptr;

const string* lexer::filename (int filenr) {
   return &lexer::filenames.at(filenr);
}

void lexer::newfilename (const string& filename) {
   lexer::lloc.filenr = lexer::filenames.size();
   lexer::filenames.push_back (filename);
}

void lexer::advance() {
   if (not interactive) {
      if (lexer::lloc.offset == 0) {
         printf (";%2zd.%3zd: ",
                 lexer::lloc.filenr, lexer::lloc.linenr);
      }
      printf ("%s", yytext);
   }
   lexer::lloc.offset += last_yyleng;
   last_yyleng = yyleng;
}

void lexer::newline() {
   ++lexer::lloc.linenr;
   lexer::lloc.offset = 0;
}

void lexer::badchar (unsigned char bad) {
   char buffer[16];
   snprintf (buffer, sizeof buffer,
             isgraph (bad) ? "%c" : "\\%03o", bad);
   errllocprintf (lexer::lloc, "invalid source character (%s)\n",
                  buffer);
}


void lexer::badtoken (char* lexeme) {
   errllocprintf (lexer::lloc, "invalid token (%s)\n", lexeme);
}

void lexer::include() {
   size_t linenr;
   static char filename[0x1000];
   assert (sizeof filename > strlen (yytext));
   int scan_rc = sscanf (yytext, "# %zd \"%[^\"]\"", &linenr, filename);
   if (scan_rc != 2) {
      errprintf ("%s: invalid directive, ignored\n", yytext);
   }else {
      if (yy_flex_debug) {
         fprintf (stderr, "--included # %zd \"%s\"\n",
                  linenr, filename);
      }
      lexer::lloc.linenr = linenr - 1;
      lexer::newfilename (filename);
   }
}

void yyerror (const char* message) {
   assert (not lexer::filenames.empty());
   errllocprintf (lexer::lloc, "%s\n", message);
}

@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: utils.cpp,v 1.8 2015-07-09 14:52:13-07 - - $
d62 1
a62 1
   assert (sizeof filename < strlen (yytext));
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: utils.cpp,v 1.7 2015-07-09 14:29:59-07 - - $
d50 2
a51 3
   errprintf ("%s: %zd.%zd: invalid source character (%s)\n",
              lexer::filename (lexer::lloc.filenr), lexer::lloc.linenr,
              lexer::lloc.offset, buffer);
d56 1
a56 3
   errprintf ("%s: %zd.%zd: invalid token (%s)\n",
              lexer::filename (lexer::lloc.filenr), lexer::lloc.linenr,
              lexer::lloc.offset, lexeme);
a59 2
   size_t text_size = strlen (yytext) + 1;
   char* filename = static_cast<char*> (alloca (text_size));
d61 2
d78 1
a78 3
   errprintf ("%s: %zd.%zd: %s\n",
              lexer::filenames.back().c_str(), lexer::lloc.linenr,
              lexer::lloc.offset - yyleng, message);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: utils.cpp,v 1.6 2015-07-09 14:08:58-07 - - $
d18 1
a18 1
astree* parser::ast_root = nullptr;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: utils.cpp,v 1.5 2015-07-08 19:21:19-07 - - $
d24 1
a24 1
void lexer::newfilename (const char* filename) {
d70 5
a75 3
      lexer::lloc.linenr = linenr - 1;
      DEBUGF ('m', "# %zd %s\n",
              lexer::lloc.linenr, lexer::filenames.back().c_str());
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: utils.cpp,v 1.4 2015-07-08 17:45:16-07 - - $
d13 1
d15 1
a15 1
bool lexer::interactive = true;
d29 1
a29 6
void lexer::newline (void) {
   ++lexer::lloc.linenr;
   lexer::lloc.offset = 0;
}

void lexer::useraction (void) {
d37 7
a43 1
   lexer::lloc.offset += yyleng;
d62 1
a62 1
void lexer::include (void) {
a83 7
int yylval_token (int symbol) {
   int offset = lexer::lloc.offset - yyleng;
   yylval = new astree (symbol, lexer::filenames.size() - 1,
                        lexer::lloc.linenr, offset, yytext);
   return symbol;
}

@


1.4
log
@-
@
text
@d1 1
a1 5
// $Id: utils.cpp,v 1.3 2015-07-08 14:57:35-07 - - $

#include <string>
#include <vector>
using namespace std;
d11 5
a18 5
int scan_linenr = 1;
int scan_offset = 0;
bool scan_echo = false;
vector<string> included_filenames;

d20 1
a20 1
   return &included_filenames.at(filenr);
d24 2
a25 1
   included_filenames.push_back (filename);
d29 2
a30 6
   ++scan_linenr;
   scan_offset = 0;
}

void lexer::setecho (bool echoflag) {
   scan_echo = echoflag;
d34 5
a38 2
   if (scan_echo) {
      if (scan_offset == 0) printf (";%5d: ", scan_linenr);
d41 1
a41 1
   scan_offset += yyleng;
d45 2
a46 2
   char char_rep[16];
   snprintf (char_rep, sizeof char_rep,
d48 3
a50 2
   errprintf ("%:%s: %d: invalid source character (%s)\n",
              included_filenames.back().c_str(), scan_linenr, char_rep);
d55 3
a57 2
   errprintf ("%:%s: %d: invalid token (%s)\n",
              included_filenames.back().c_str(), scan_linenr, lexeme);
d63 2
a64 2
   int linenr;
   int scan_rc = sscanf (yytext, "# %d \"%[^\"]\"", &linenr, filename);
d66 1
a66 2
      errprintf ("%: %d: [%s]: invalid directive, ignored\n",
                 scan_rc, yytext);
d69 3
a71 3
      scan_linenr = linenr - 1;
      DEBUGF ('m', "# %d %s\n",
              scan_linenr, included_filenames.back().c_str());
d76 4
a79 3
   assert (not included_filenames.empty());
   errprintf ("%:%s: %d: %s\n",
              included_filenames.back().c_str(), scan_linenr, message);
d83 3
a85 3
   int offset = scan_offset - yyleng;
   yylval = new astree (symbol, included_filenames.size() - 1,
                        scan_linenr, offset, yytext);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: utils.cpp,v 1.2 2015-07-08 14:45:09-07 - - $
d13 1
a13 1
#include "auxlib.h"
d17 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: utils.cpp,v 1.1 2015-07-08 14:39:44-07 - - $
d16 1
a16 1
astree* yyparse_astree = NULL;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: utils.cpp,v 1.9 2015-07-08 14:15:55-07 - - $
a89 5
astree* new_parseroot (void) {
   yyparse_astree = new astree (ROOT, 0, 0, 0, "<<ROOT>>");
   return yyparse_astree;
}

@

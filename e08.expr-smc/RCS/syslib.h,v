head	1.5;
access;
symbols;
locks;
comment	@ * @;


1.5
date	2015.07.10.01.10.52;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.07.09.21.29.59;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.07.09.21.08.58;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.07.09.02.21.19;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.07.09.00.45.16;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: syslib.h,v 1.4 2015-07-09 14:29:59-07 - - $

#ifndef __SYSLIB_H__
#define __SYSLIB_H__

#include <string>
using namespace std;

#include <stdarg.h>

// DESCRIPTION
//    Auxiliary library containing miscellaneous useful things.

struct exec {
   static string execname;
   static int exit_status;
   static void set_status (int);
};

// Print the status returned by wait(2) from a subprocess.
void eprint_status (const char* command, int status);

// Print an error message according to the printf format
// specified, using eprintf.  Sets the exitstatus to EXIT_FAILURE.
void errprintf (const char* format, ...);

// Print a message resulting from a bad system call.  The
// object is the name of the object causing the problem and
// the reason is taken from the external variable errno.
// Sets the exit status to EXIT_FAILURE.
void syserrprintf (const char* object);

#endif

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: syslib.h,v 1.3 2015-07-09 14:08:58-07 - - $
d6 3
a10 1
//
a12 1
//
d14 5
a18 15
//
// Error message and exit status utility.
//

void set_execname (char* argv0);
   //
   // Sets the program name for use by syslib messages.
   // Must called from main before anything else is done,
   // passing in argv[0].
   //

const char* get_execname();
   //
   // Returns a read-only value previously stored by set_progname.
   //
d20 1
a21 15
   //
   // Print the status returned by wait(2) from a subprocess.
   //

int get_exitstatus();
   //
   // Returns the exit status.  Default is EXIT_SUCCESS unless
   // set_exitstatus (int) is called.  The last statement in main
   // should be:  ``return get_exitstatus();''.
   //

void set_exitstatus (int);
   //
   // Sets the exit status.  Remebers only the largest value passed in.
   //
d23 2
a24 1

a25 4
   //
   // Print an error message according to the printf format
   // specified, using eprintf.  Sets the exitstatus to EXIT_FAILURE.
   //
d27 4
a31 6
   //
   // Print a message resulting from a bad system call.  The
   // object is the name of the object causing the problem and
   // the reason is taken from the external variable errno.
   // Sets the exit status to EXIT_FAILURE.
   //
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: syslib.h,v 1.2 2015-07-08 19:21:19-07 - - $
a60 35

//
// Debugging utility.
//

void set_debugflags (const char* flags);
   //
   // Sets a string of debug flags to be used by DEBUGF statements.
   // Uses the address of the string, and does not copy it, so it
   // must not be dangling.  If a particular debug flag has been set,
   // messages are printed.  The format is identical to printf format.
   // The flag "@@" turns on all flags.
   //

bool is_debugflag (char flag);
   //
   // Checks to see if a debugflag is set.
   //

#ifdef NDEBUG
// Do not generate any code.
#define DEBUGF(FLAG,...) ;
#define DEBUGSTMT(FLAG,STMTS) ;
#else
// Generate debugging code.
void __debugprintf (char flag, const char* file, int line,
                    const char* func, const char* format, ...);
#define DEBUGF(FLAG,...) \
        __debugprintf (FLAG, __FILE__, __LINE__, __func__, __VA_ARGS__)
#define DEBUGSTMT(FLAG,STMTS) \
        if (is_debugflag (FLAG)) { DEBUGF (FLAG, ""); STMTS; }
#define DEBUGNLSTMT(FLAG,STMTS) \
        if (is_debugflag (FLAG)) { DEBUGF (FLAG, "\n"); STMTS; }
#endif

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: syslib.h,v 1.1 2015-07-08 17:45:16-07 - - $
d24 1
a24 1
const char* get_execname (void);
d34 1
a34 1
int get_exitstatus (void);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: syslib.h,v 1.2 2015-07-08 13:56:58-07 - - $
a46 14
void veprintf (const char* format, va_list args);
   //
   // Prints a message to stderr using the vector form of 
   // argument list.
   //

void eprintf (const char* format, ...);
   //
   // Print a message to stderr according to the printf format
   // specified.  Usually called for debug output.
   // Precedes the message by the program name if the format
   // begins with the characters `%:'.
   //

@

head	1.17;
access;
symbols;
locks;
comment	@// @;


1.17
date	2019.03.15.21.32.40;	author -;	state -;
branches;
next	1.16;

1.16
date	2019.03.15.21.27.26;	author -;	state -;
branches;
next	1.15;

1.15
date	2017.10.05.23.39.39;	author -;	state -;
branches;
next	1.14;

1.14
date	2016.08.18.22.05.42;	author -;	state -;
branches;
next	1.13;

1.13
date	2016.08.18.21.59.46;	author -;	state -;
branches;
next	1.12;

1.12
date	2015.07.10.01.30.04;	author -;	state -;
branches;
next	1.11;

1.11
date	2015.07.10.01.25.23;	author -;	state -;
branches;
next	1.10;

1.10
date	2015.07.10.01.10.52;	author -;	state -;
branches;
next	1.9;

1.9
date	2015.07.09.21.52.13;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.07.09.21.08.58;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.07.09.02.21.19;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.07.08.21.57.35;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.07.08.21.39.44;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.07.08.21.28.49;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.07.08.21.18.52;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.07.08.21.15.55;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.07.08.20.29.32;	author -;	state -;
branches;
next	;


desc
@@


1.17
log
@-
@
text
@// $Id: astree.cpp,v 1.16 2019-03-15 14:27:26-07 - - $

#include <assert.h>
#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "astree.h"
#include "string_set.h"
#include "lyutils.h"

astree::astree (int symbol_, const location& lloc_, const char* info) {
   symbol = symbol_;
   lloc = lloc_;
   lexinfo = string_set::intern (info);
   // vector defaults to empty -- no children
}

astree::~astree() {
   while (not children.empty()) {
      astree* child = children.back();
      children.pop_back();
      delete child;
   }
   if (yydebug) {
      fprintf (stderr, "Deleting astree (");
      astree::dump (stderr, this);
      fprintf (stderr, ")\n");
   }
}

astree* astree::adopt (astree* child1, astree* child2) {
   if (child1 != nullptr) children.push_back (child1);
   if (child2 != nullptr) children.push_back (child2);
   return this;
}

astree* astree::adopt_sym (astree* child, int symbol_) {
   symbol = symbol_;
   return adopt (child);
}


void astree::dump_node (FILE* outfile) {
   fprintf (outfile, "%p->{%s %zd.%zd.%zd \"%s\":",
            static_cast<const void*> (this),
            parser::get_tname (symbol),
            lloc.filenr, lloc.linenr, lloc.offset,
            lexinfo->c_str());
   for (size_t child = 0; child < children.size(); ++child) {
      fprintf (outfile, " %p",
               static_cast<const void*> (children.at(child)));
   }
}

void astree::dump_tree (FILE* outfile, int depth) {
   fprintf (outfile, "%*s", depth * 3, "");
   dump_node (outfile);
   fprintf (outfile, "\n");
   for (astree* child: children) child->dump_tree (outfile, depth + 1);
   fflush (nullptr);
}

void astree::dump (FILE* outfile, astree* tree) {
   if (tree == nullptr) fprintf (outfile, "nullptr");
                   else tree->dump_node (outfile);
}

void astree::print (FILE* outfile, astree* tree, int depth) {
   fprintf (outfile, "; %*s", depth * 3, "");
   fprintf (outfile, "%s \"%s\" (%zd.%zd.%zd)\n",
            parser::get_tname (tree->symbol), tree->lexinfo->c_str(),
            tree->lloc.filenr, tree->lloc.linenr, tree->lloc.offset);
   for (astree* child: tree->children) {
      astree::print (outfile, child, depth + 1);
   }
}

void destroy (astree* tree1, astree* tree2) {
   if (tree1 != nullptr) delete tree1;
   if (tree2 != nullptr) delete tree2;
}

void errllocprintf (const location& lloc, const char* format,
                    const char* arg) {
   static char buffer[0x1000];
   assert (sizeof buffer > strlen (format) + strlen (arg));
   snprintf (buffer, sizeof buffer, format, arg);
   errprintf ("%s:%zd.%zd: %s", 
              lexer::filename (lloc.filenr), lloc.linenr, lloc.offset,
              buffer);
}
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.15 2017-10-05 16:39:39-07 - - $
d48 2
a49 1
            static_cast<void*> (this), parser::get_tname (symbol),
d53 2
a54 1
      fprintf (outfile, " %p", static_cast<void*> (children.at(child)));
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.14 2016-08-18 15:05:42-07 - - $
d48 1
a48 1
            this, parser::get_tname (symbol),
d52 1
a52 1
      fprintf (outfile, " %p", children.at(child));
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.13 2016-08-18 14:59:46-07 - - $
d61 1
a61 1
   fflush (NULL);
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.12 2015-07-09 18:30:04-07 - - $
d11 1
a11 1
#include "stringset.h"
d17 1
a17 1
   lexinfo = stringset::intern (info);
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.11 2015-07-09 18:25:23-07 - - $
d12 1
a12 1
#include "utils.h"
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.10 2015-07-09 18:10:52-07 - - $
d87 1
a87 1
   assert (sizeof buffer < strlen (format) + strlen (arg));
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.9 2015-07-09 14:52:13-07 - - $
d84 9
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.8 2015-07-09 14:08:58-07 - - $
d21 13
a63 13
astree::~astree() {
   while (not children.empty()) {
      astree* child = children.back();
      children.pop_back();
      delete child;
   }
   if (yydebug) {
      fprintf (stderr, "Deleting astree (");
      astree::dump (stderr, this);
      fprintf (stderr, ")\n");
   }
}

@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.7 2015-07-08 19:21:19-07 - - $
d47 1
a47 3
   for (size_t child = 0; child < children.size(); ++child) {
      children[child]->dump_tree (outfile, depth + 1);
   }
d69 10
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.6 2015-07-08 14:57:35-07 - - $
d14 1
a14 2
astree::astree (int symbol_, int filenr_, int linenr_, int offset_,
                const char* lexinfo_) {
d16 2
a17 4
   lloc.filenr = filenr_;
   lloc.linenr = linenr_;
   lloc.offset = offset_;
   lexinfo = stringset::intern (lexinfo_);
d61 1
a61 1
      astree::print (stderr, this);
d66 1
a66 1
void astree::print (FILE* outfile, astree* tree) {
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.5 2015-07-08 14:39:44-07 - - $
d17 4
a20 4
   filenr = filenr_;
   linenr = linenr_;
   offset = offset_;
   lexinfo = intern_stringset (lexinfo_);
d38 2
a39 1
            this, parser::get_tname (symbol), filenr, linenr, offset,
d62 5
a66 1
   DEBUGSTMT ('f', astree::print (stderr, this); eprintf ("\n"); );
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.4 2015-07-08 14:28:49-07 - - $
d38 1
a38 1
            this, get_yytname (symbol), filenr, linenr, offset,
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.3 2015-07-08 14:18:52-07 - - $
a10 1
#include "lyutils.h"
d12 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.2 2015-07-08 14:15:55-07 - - $
d61 1
a61 1
   DEBUGSTMT ('f', yyprint (stderr, this); eprintf ("\n"); );
d64 1
a64 1
void yyprint (FILE* outfile, astree* tree) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.1 2015-07-08 13:29:32-07 - - $
d11 1
a12 1
#include "lyutils.h"
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: astree.cpp,v 1.1 2015-07-08 13:24:25-07 - - $
a54 5
void yyprint (FILE* outfile, astree* tree) {
   if (tree == nullptr) fprintf (outfile, "nullptr");
                   else tree->dump_node (outfile);
}

d64 10
@

head	1.18;
access;
symbols;
locks;
comment	@// @;


1.18
date	2017.10.19.23.02.14;	author -;	state -;
branches;
next	1.17;

1.17
date	2017.10.05.23.39.39;	author -;	state -;
branches;
next	1.16;

1.16
date	2016.10.06.23.42.35;	author -;	state -;
branches;
next	1.15;

1.15
date	2016.10.06.23.26.41;	author -;	state -;
branches;
next	1.14;

1.14
date	2016.08.18.22.05.42;	author -;	state -;
branches;
next	1.13;

1.13
date	2016.08.18.21.59.46;	author -;	state -;
branches;
next	1.12;

1.12
date	2015.07.10.01.32.20;	author -;	state -;
branches;
next	1.11;

1.11
date	2015.07.10.01.10.52;	author -;	state -;
branches;
next	1.10;

1.10
date	2015.07.09.21.52.13;	author -;	state -;
branches;
next	1.9;

1.9
date	2015.07.09.21.29.59;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.07.09.21.08.58;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.07.09.02.21.19;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.07.09.00.45.16;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.07.08.21.57.35;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.07.08.21.39.44;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.07.08.21.05.24;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.07.08.20.56.58;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.07.08.20.29.32;	author -;	state -;
branches;
next	;


desc
@@


1.18
log
@-
@
text
@// $Id: main.cpp,v 1.17 2017-10-05 16:39:39-07 - - $

#include <string>
#include <vector>
using namespace std;

#include <assert.h>
#include <errno.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "astree.h"
#include "auxlib.h"
#include "emitter.h"
#include "lyutils.h"
#include "string_set.h"

const string cpp_name = "/usr/bin/cpp";
string cpp_command;

// Open a pipe from the C preprocessor.
// Exit failure if can't.
// Assigns opened pipe to FILE* yyin.
void cpp_popen (const char* filename) {
   cpp_command = cpp_name + " " + filename;
   yyin = popen (cpp_command.c_str(), "r");
   if (yyin == nullptr) {
      syserrprintf (cpp_command.c_str());
      exit (exec::exit_status);
   }else {
      if (yy_flex_debug) {
         fprintf (stderr, "-- popen (%s), fileno(yyin) = %d\n",
                  cpp_command.c_str(), fileno (yyin));
      }
      lexer::newfilename (cpp_command);
   }
}

void cpp_pclose() {
   int pclose_rc = pclose (yyin);
   eprint_status (cpp_command.c_str(), pclose_rc);
   if (pclose_rc != 0) exec::exit_status = EXIT_FAILURE;
}


void scan_opts (int argc, char** argv) {
   opterr = 0;
   yy_flex_debug = 0;
   yydebug = 0;
   lexer::interactive = isatty (fileno (stdin))
                    and isatty (fileno (stdout));
   for(;;) {
      int opt = getopt (argc, argv, "@@:ly");
      if (opt == EOF) break;
      switch (opt) {
         case '@@': set_debugflags (optarg);   break;
         case 'l': yy_flex_debug = 1;         break;
         case 'y': yydebug = 1;               break;
         default:  errprintf ("bad option (%c)\n", optopt); break;
      }
   }
   if (optind > argc) {
      errprintf ("Usage: %s [-ly] [filename]\n",
                 exec::execname.c_str());
      exit (exec::exit_status);
   }
   const char* filename = optind == argc ? "-" : argv[optind];
   cpp_popen (filename);
}

int main (int argc, char** argv) {
   exec::execname = basename (argv[0]);
   if (yydebug or yy_flex_debug) {
      fprintf (stderr, "Command:");
      for (char** arg = &argv[0]; arg < &argv[argc]; ++arg) {
            fprintf (stderr, " %s", *arg);
      }
      fprintf (stderr, "\n");
   }
   scan_opts (argc, argv);
   int parse_rc = yyparse();
   cpp_pclose();
   yylex_destroy();
   if (yydebug or yy_flex_debug) {
      fprintf (stderr, "Dumping parser::root:\n");
      if (parser::root != nullptr) parser::root->dump_tree (stderr);
      fprintf (stderr, "Dumping string_set:\n");
      string_set::dump (stderr);
   }
   if (parse_rc) {
      errprintf ("parse failed (%d)\n", parse_rc);
   }else {
      astree::print (stdout, parser::root);
      emit_sm_code (parser::root);
      delete parser::root;
   }
   return exec::exit_status;
}

@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.16 2016-10-06 16:42:35-07 - - $
d9 1
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.15 2016-10-06 16:26:41-07 - - $
d29 1
a29 1
   if (yyin == NULL) {
d55 1
a55 1
      int opt = getopt (argc, argv, "ly");
d58 1
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.14 2016-08-18 15:05:42-07 - - $
d15 1
d17 1
a18 2
#include "syslib.h"
#include "lyutils.h"
d44 1
a44 1
   if (pclose_rc != 0) exec::set_status (EXIT_FAILURE);
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.13 2016-08-18 14:59:46-07 - - $
a18 1
#include "yylex.h"
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.12 2015-07-09 18:32:20-07 - - $
d16 1
a16 1
#include "stringset.h"
d89 2
a90 2
      fprintf (stderr, "Dumping stringset:\n");
      stringset::dump (stderr);
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.11 2015-07-09 18:10:52-07 - - $
d18 1
a18 1
#include "utils.h"
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.10 2015-07-09 14:52:13-07 - - $
d56 1
a56 1
      int opt = getopt (argc, argv, "@@:ely");
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.9 2015-07-09 14:29:59-07 - - $
d32 1
a32 1
      exit (get_exitstatus());
d45 1
a45 1
   if (pclose_rc != 0) set_exitstatus (EXIT_FAILURE);
d65 3
a67 2
      errprintf ("Usage: %s [-ly] [filename]\n", get_execname());
      exit (get_exitstatus());
d74 1
a74 1
   set_execname (argv[0]);
d99 1
a99 1
   return get_exitstatus();
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.8 2015-07-09 14:08:58-07 - - $
a49 1
   int option;
d56 3
a58 4
      option = getopt (argc, argv, "@@:ely");
      if (option == EOF) break;
      switch (option) {
         case '@@': set_debugflags (optarg);   break;
d83 8
d94 3
a96 3
      DEBUGNLSTMT ('a', parser::ast_root->dump_tree (stderr); );
      emit_sm_code (parser::ast_root);
      delete parser::ast_root;
a97 3
   cpp_pclose();
   DEBUGNLSTMT ('s', stringset::dump (stderr); );
   yylex_destroy();
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.7 2015-07-08 19:21:19-07 - - $
d22 1
a22 1
string yyin_cpp_command;
d26 4
a29 6
// Assignes opened pipe to FILE* yyin.
void yyin_cpp_popen (const char* filename) {
   yyin_cpp_command = cpp_name;
   yyin_cpp_command += " ";
   yyin_cpp_command += filename;
   yyin = popen (yyin_cpp_command.c_str(), "r");
d31 1
a31 1
      syserrprintf (yyin_cpp_command.c_str());
d33 6
d42 1
a42 1
void yyin_cpp_pclose() {
d44 1
a44 1
   eprint_status (yyin_cpp_command.c_str(), pclose_rc);
d71 1
a71 4
   yyin_cpp_popen (filename);
   DEBUGF ('m', "file = \"%s\", fileno (yyin) = %d\n",
           filename, fileno (yyin));
   lexer::newfilename (filename);
d92 1
a92 1
   yyin_cpp_pclose();
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.6 2015-07-08 17:45:16-07 - - $
d15 1
a15 1
#include "emit.h"
d38 1
a38 1
void yyin_cpp_pclose (void) {
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.5 2015-07-08 14:57:35-07 - - $
d19 1
a43 4
bool want_echo () {
   return not (isatty (fileno (stdin)) and isatty (fileno (stdout)));
}

d50 2
d59 1
a59 1
         default:  errprintf ("%:bad option (%c)\n", optopt); break;
a73 1
   int parsecode = 0;
d75 4
a78 3
   DEBUGNLSTMT ('m',
      for (int argi = 0; argi < argc; ++argi) {
         eprintf ("%s%c", argv[argi], argi < argc - 1 ? ' ' : '\n');
d80 2
a81 1
   );
d83 3
a85 4
   lexer::setecho (want_echo());
   parsecode = yyparse();
   if (parsecode) {
      errprintf ("%:parse failed (%d)\n", parsecode);
d89 1
a90 1
   delete parser::ast_root;
d92 1
a92 1
   DEBUGNLSTMT ('s', dump_stringset (stderr); );
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.4 2015-07-08 14:39:44-07 - - $
a14 1
#include "auxlib.h"
d17 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.3 2015-07-08 14:05:24-07 - - $
d88 2
a89 2
      DEBUGNLSTMT ('a', yyparse_astree->dump_tree (stderr); );
      emit_sm_code (yyparse_astree);
d91 1
a91 1
   delete yyparse_astree;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.2 2015-07-08 13:56:58-07 - - $
a16 1
#include "lyutils.h"
d18 1
d71 1
a71 1
   scanner_newfilename (filename);
d83 1
a83 1
   scanner_setecho (want_echo());
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.1 2015-07-08 13:29:32-07 - - $
d69 2
a70 2
   DEBUGF ('m', "filename = %s, yyin = %p, fileno (yyin) = %d\n",
           filename, yyin, fileno (yyin));
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.1 2015-07-08 13:24:25-07 - - $
d77 1
a77 1
   DEBUGSTMT ('m',
d88 1
a88 1
      DEBUGSTMT ('a', yyparse_astree->dump_tree (stderr); );
d93 1
a93 1
   DEBUGSTMT ('s', dump_stringset (stderr); );
@

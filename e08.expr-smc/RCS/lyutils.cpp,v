head	1.6;
access;
symbols;
locks;
comment	@// @;


1.6
date	2019.04.18.20.35.11;	author -;	state -;
branches;
next	1.5;

1.5
date	2019.04.18.20.33.21;	author -;	state -;
branches;
next	1.4;

1.4
date	2019.03.15.21.32.40;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.10.06.23.42.35;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.10.06.23.26.41;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.08.18.21.59.46;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// $Id: lyutils.cpp,v 1.5 2019-04-18 13:33:21-07 - - $

#include <assert.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "auxlib.h"
#include "lyutils.h"

bool lexer::interactive = true;
location lexer::lloc = {0, 1, 0};
size_t lexer::last_yyleng = 0;
vector<string> lexer::filenames;

astree* parser::root = nullptr;

const string* lexer::filename (int filenr) {
   return &lexer::filenames.at(filenr);
}

void lexer::newfilename (const string& filename) {
   lexer::lloc.filenr = lexer::filenames.size();
   lexer::filenames.push_back (filename);
}

void lexer::advance() {
   if (not interactive) {
      if (lexer::lloc.offset == 0) {
         printf (";%2zd.%3zd: ",
                 lexer::lloc.filenr, lexer::lloc.linenr);
      }
      printf ("%s", yytext);
   }
   lexer::lloc.offset += last_yyleng;
   last_yyleng = yyleng;
}

void lexer::newline() {
   ++lexer::lloc.linenr;
   lexer::lloc.offset = 0;
}

void lexer::badchar (unsigned char bad) {
   char buffer[16];
   snprintf (buffer, sizeof buffer,
             isgraph (bad) ? "%c" : "\\%03o", bad);
   errllocprintf (lexer::lloc, "invalid source character (%s)\n",
                  buffer);
}


void lexer::include() {
   size_t linenr;
   static char filename[0x1000];
   assert (sizeof filename > strlen (yytext));
   int scan_rc = sscanf (yytext, "# %zu \"%[^\"]\"", &linenr, filename);
   if (scan_rc != 2) {
      errprintf ("%s: invalid directive, ignored\n", yytext);
   }else {
      if (yy_flex_debug) {
         fprintf (stderr, "--included # %zd \"%s\"\n",
                  linenr, filename);
      }
      lexer::lloc.linenr = linenr - 1;
      lexer::newfilename (filename);
   }
}

int lexer::token (int symbol) {
   yylval = new astree (symbol, lexer::lloc, yytext);
   return symbol;
}

int lexer::badtoken (int symbol) {
   errllocprintf (lexer::lloc, "invalid token (%s)\n", yytext);
   return lexer::token (symbol);
}

void yyerror (const char* message) {
   assert (not lexer::filenames.empty());
   errllocprintf (lexer::lloc, "%s\n", message);
}

@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: lyutils.cpp,v 1.4 2019-03-15 14:32:40-07 - - $
d76 1
a76 1
void lexer::badtoken (int symbol) {
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: lyutils.cpp,v 1.3 2016-10-06 16:42:35-07 - - $
a53 4
void lexer::badtoken (char* lexeme) {
   errllocprintf (lexer::lloc, "invalid token (%s)\n", lexeme);
}

d69 10
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: lyutils.cpp,v 1.2 2016-10-06 16:26:41-07 - - $
d62 1
a62 1
   int scan_rc = sscanf (yytext, "# %zd \"%[^\"]\"", &linenr, filename);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: lyutils.cpp,v 1.1 2016-08-18 14:59:46-07 - - $
d9 1
a9 1
#include "syslib.h"
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: lyutils.cpp,v 1.10 2015-07-09 18:30:04-07 - - $
a10 1
#include "yylex.h"
@

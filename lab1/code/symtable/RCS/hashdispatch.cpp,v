head	1.8;
access;
symbols;
locks;
comment	@// @;


1.8
date	2018.11.07.19.46.10;	author -;	state -;
branches;
next	1.7;

1.7
date	2018.11.07.19.41.00;	author -;	state -;
branches;
next	1.6;

1.6
date	2018.11.07.19.40.44;	author -;	state -;
branches;
next	1.5;

1.5
date	2018.11.07.19.40.31;	author -;	state -;
branches;
next	1.4;

1.4
date	2018.11.07.19.39.42;	author -;	state -;
branches;
next	1.3;

1.3
date	2018.11.07.19.39.04;	author -;	state -;
branches;
next	1.2;

1.2
date	2018.11.07.19.38.41;	author -;	state -;
branches;
next	1.1;

1.1
date	2018.11.07.19.33.08;	author -;	state -;
branches;
next	;


desc
@@


1.8
log
@-
@
text
@// $Id: hashdispatch.cpp,v 1.7 2018-11-07 11:41:00-08 - - $

#include <iostream>
#include <unordered_map>
using namespace std;

string add() { return __PRETTY_FUNCTION__; }
string sub() { return __PRETTY_FUNCTION__; }
string mul() { return __PRETTY_FUNCTION__; }
string div() { return __PRETTY_FUNCTION__; }

using function = string(*)();
unordered_map<char,function> dispatch {
   {'+', add},
   {'-', sub},
   {'*', mul},
   {'/', div},
};

int main() {
   const char ops[] = "+-*/%";
   for (int i = 0; ops[i]; ++i) {
      auto itor = dispatch.find (ops[i]);
      if (itor == dispatch.end()) {
         cout << ops[i] << ": not found" << endl;
      }else {
         auto f = itor->second;
         cout << reinterpret_cast<void*> (f) << " " << f() << endl;
      }
   }
}

//TEST// ./hashdispatch >hashdispatch.lis 2>&1
//TEST// mkpspdf hashdispatch.ps hashdispatch.cpp* hashdispatch.lis

@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: hashdispatch.cpp,v 1.6 2018-11-07 11:40:44-08 - - $
d32 3
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: hashdispatch.cpp,v 1.5 2018-11-07 11:40:31-08 - - $
d21 1
a21 1
   const char ops[] = "+-*/?";
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: hashdispatch.cpp,v 1.4 2018-11-07 11:39:42-08 - - $
d24 1
a24 1
      if (itor = dispatch.end()) {
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: hashdispatch.cpp,v 1.3 2018-11-07 11:39:04-08 - - $
d23 2
a24 2
      function f = dispatch.find (ops[i]);
      if (f = dispatch.end()) {
d27 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: hashdispatch.cpp,v 1.2 2018-11-07 11:38:41-08 - - $
d12 1
a12 1
using function = void (*)();
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: hashdispatch.cpp,v 1.1 2018-11-07 11:33:08-08 - - $
d21 1
a21 1
   const char ops[] = "+-*/";
d23 1
a23 1
      fn f = dispatch.find (ops[i]);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: hashdispatch.cpp,v 1.1 2018-05-10 14:05:24-07 - - $
a3 1
#include <stdio.h>
d7 4
a10 4
void add() { printf ("%s\n", __PRETTY_FUNCTION__); }
void sub() { printf ("%s\n", __PRETTY_FUNCTION__); }
void mul() { printf ("%s\n", __PRETTY_FUNCTION__); }
void div() { printf ("%s\n", __PRETTY_FUNCTION__); }
d12 2
a13 2
using fn = void (*)();
unordered_map<char,fn> dispatch = {
d21 1
a21 1
   char ops[] = "+-*/";
d23 6
a28 3
      fn f = dispatch[int(ops[i])];
      cout << reinterpret_cast<void*> (f) << " ";
      f();
@

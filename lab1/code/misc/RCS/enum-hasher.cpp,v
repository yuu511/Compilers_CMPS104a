head	1.21;
access;
symbols;
locks;
comment	@// @;


1.21
date	2018.05.09.22.41.38;	author -;	state -;
branches;
next	1.20;

1.20
date	2018.05.09.22.39.42;	author -;	state -;
branches;
next	1.19;

1.19
date	2018.05.09.22.37.52;	author -;	state -;
branches;
next	1.18;

1.18
date	2018.05.09.22.37.32;	author -;	state -;
branches;
next	1.17;

1.17
date	2018.05.09.22.37.17;	author -;	state -;
branches;
next	1.16;

1.16
date	2018.05.09.22.22.46;	author -;	state -;
branches;
next	1.15;

1.15
date	2018.05.09.22.21.53;	author -;	state -;
branches;
next	1.14;

1.14
date	2018.05.09.22.19.06;	author -;	state -;
branches;
next	1.13;

1.13
date	2018.05.09.22.18.57;	author -;	state -;
branches;
next	1.12;

1.12
date	2018.05.09.22.18.46;	author -;	state -;
branches;
next	1.11;

1.11
date	2018.05.09.22.16.54;	author -;	state -;
branches;
next	1.10;

1.10
date	2018.05.09.22.15.59;	author -;	state -;
branches;
next	1.9;

1.9
date	2018.05.09.22.13.59;	author -;	state -;
branches;
next	1.8;

1.8
date	2018.05.09.22.10.05;	author -;	state -;
branches;
next	1.7;

1.7
date	2018.05.09.22.09.37;	author -;	state -;
branches;
next	1.6;

1.6
date	2018.05.09.22.09.22;	author -;	state -;
branches;
next	1.5;

1.5
date	2018.05.09.22.09.10;	author -;	state -;
branches;
next	1.4;

1.4
date	2018.05.09.22.08.57;	author -;	state -;
branches;
next	1.3;

1.3
date	2018.05.09.22.08.15;	author -;	state -;
branches;
next	1.2;

1.2
date	2018.05.09.22.06.12;	author -;	state -;
branches;
next	1.1;

1.1
date	2018.05.09.22.05.52;	author -;	state -;
branches;
next	;


desc
@@


1.21
log
@-
@
text
@// $Id: enum-hasher.cpp,v 1.20 2018-05-09 15:39:42-07 - - $

//
// Example of how to convert constants of an enum class into strings.
//

#include <bitset>
#include <iostream>
#include <stdexcept>
#include <unordered_map>
#include <vector>
using namespace std;

enum class attr: unsigned {
       VOID, INT, NULLX, STRING, STRUCT, ARRAY, FUNCTION, VARIABLE,
       FIELD, TYPEID, PARAM, LVAL, CONST, VREG, VADDR, BITSET_SIZE,
};
using attr_bitset = bitset<unsigned(attr::BITSET_SIZE)>;

const string to_string (attr attribute) {
   static const unordered_map<attr,string> hash {
      {attr::VOID       , "void"       },
      {attr::INT        , "int"        },
      {attr::NULLX      , "null"       },
      {attr::STRING     , "string"     },
      {attr::STRUCT     , "struct"     },
      {attr::ARRAY      , "array"      },
      {attr::FUNCTION   , "function"   },
      {attr::VARIABLE   , "variable"   },
      {attr::FIELD      , "field"      },
      {attr::TYPEID     , "typeid"     },
      {attr::PARAM      , "param"      },
      {attr::LVAL       , "lval"       },
      {attr::CONST      , "const"      },
      {attr::VREG       , "vreg"       },
      {attr::VADDR      , "vaddr"      },
      {attr::BITSET_SIZE, "bitset_size"},
   };
   auto str = hash.find (attribute);
   if (str == hash.end()) throw invalid_argument ("to_string(attr)");
   return str->second;
}

int main() {
   vector<attr> attrs {
      attr::VOID, attr::INT, attr::NULLX, attr::STRING, attr::STRUCT,
      attr::ARRAY, attr::FUNCTION, attr::VARIABLE, attr::FIELD,
      attr::TYPEID, attr::PARAM, attr::LVAL, attr::CONST, attr::VREG,
      attr::VADDR, attr::BITSET_SIZE,
   };
   for (const auto attrib: attrs) {
      cout << static_cast<unsigned> (attrib)
           << " = " << to_string (attrib) << endl;
   }
}

@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.18 2018-05-09 15:37:32-07 - - $
d14 1
a14 1
enum class attr: short {
d18 1
a18 1
using attr_bitset = bitset<attr::BITSET_SIZE>;
d52 1
a52 1
      cout << static_cast<short> (attrib)
@


1.19
log
@-
@
text
@d18 1
a18 1
using attr_bitset = bitset<short (attr::BITSET_SIZE)>;
a20 5
   struct hasher {
      auto operator() (attr sym) const {
         return static_cast<short> (sym);
      }
   };
a21 1
   //static const unordered_map<attr,string,hasher> hash {
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.17 2018-05-09 15:37:17-07 - - $
d26 2
a27 1
   static const unordered_map<attr,string,hasher> hash {
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.15 2018-05-09 15:21:53-07 - - $
d57 1
a57 1
      cout << static_cast<underlying_type<attrib>> (attrib)
@


1.16
log
@-
@
text
@a9 1
#include <type_traits>
d23 1
a23 1
         return static_cast<underlying_type<attr>::type> (sym);
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.14 2018-05-09 15:19:06-07 - - $
d15 1
a15 1
enum class attr: unsigned {
d19 1
a19 1
using attr_bitset = bitset<attr::BITSET_SIZE>;
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.13 2018-05-09 15:18:57-07 - - $
d15 1
a15 1
enum class attr {
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.12 2018-05-09 15:18:46-07 - - $
d56 1
a56 1
   }
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.11 2018-05-09 15:16:54-07 - - $
d12 1
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.10 2018-05-09 15:15:59-07 - - $
d50 9
a58 3
   for (auto atr = attr::VOID; atr < attr::BITSET_SIZE; ++atr) {
      cout << static_cast<underlying_type<attr>> (atr)
           << " = " << to_string (atr) << endl;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.9 2018-05-09 15:13:59-07 - - $
d10 1
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.8 2018-05-09 15:10:05-07 - - $
d44 1
a44 1
   if (str == hash.end()) throw invalid_argument();
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.7 2018-05-09 15:09:37-07 - - $
d9 1
d43 3
a45 1
   return hash.find (attribute).second;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.6 2018-05-09 15:09:22-07 - - $
d20 2
a21 2
      auto operator() (tsymbol sym) const {
         return static_cast<underlying_type<tsymbol>::type> (sym);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.5 2018-05-09 15:09:10-07 - - $
d9 1
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.4 2018-05-09 15:08:57-07 - - $
d7 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.3 2018-05-09 15:08:15-07 - - $
d17 1
a17 1
   static struct hasher {
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.2 2018-05-09 15:06:12-07 - - $
d45 2
a46 1
      cout << atr << " = " << to_string (atr) << endl;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: enum-hasher.cpp,v 1.1 2018-05-09 15:05:52-07 - - $
d11 1
a11 1
       VOID, INT, NULL, STRING, STRUCT, ARRAY, FUNCTION, VARIABLE,
d25 1
a25 1
      {attr::NULL       , "null"       },
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d6 3
@

head	1.6;
access;
symbols;
locks;
comment	@// @;


1.6
date	2019.04.05.23.17.22;	author -;	state -;
branches;
next	1.5;

1.5
date	2019.04.05.23.15.32;	author -;	state -;
branches;
next	1.4;

1.4
date	2019.04.05.23.15.10;	author -;	state -;
branches;
next	1.3;

1.3
date	2019.04.05.23.14.14;	author -;	state -;
branches;
next	1.2;

1.2
date	2019.04.05.23.13.56;	author -;	state -;
branches;
next	1.1;

1.1
date	2019.04.05.23.13.29;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// $Id: hashdisplatch.cpp,v 1.1 2019-04-05 16:13:29-07 - - $

#include <iostream>
#include <unordered_map>
using namespace std;

void add (void) { cout << __PRETTY_FUNCTION__ << endl; }
void sub (void) { cout << __PRETTY_FUNCTION__ << endl; }
void mul (void) { cout << __PRETTY_FUNCTION__ << endl; }
void div (void) { cout << __PRETTY_FUNCTION__ << endl; }

using fn = void (*)();
unordered_map<char,fn> dispatch {
   {'+', add},
   {'-', sub},
   {'*', mul},
   {'/', div},
};

int main() {
   char ops[] = "+-*/";
   for (int i = 0; ops[i]; ++i) {
      fn f = dispatch[ops[i]];
      cout << ops[i] << ": " << reinterpret_cast<const void*> (f)
           << "->";
      f();
   }
}

@


1.5
log
@-
@
text
@d24 2
a25 1
      cout << ops[i] << ": " << reinterpret_cast<const void*> (f) << ": ";
@


1.4
log
@-
@
text
@d24 1
a24 1
      cout << ops[i] << ": " << static_cast<const void*> (f) << ": ";
@


1.3
log
@-
@
text
@d24 1
a24 1
      cout << ops[i] << ": " << f << ": ";
@


1.2
log
@-
@
text
@a22 1
      int s = ops[i];
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: arraydispatch.cpp,v 1.1 2019-04-05 16:05:35-07 - - $
d14 4
a17 4
   {'+', = add},
   {'-', = sub},
   {'*', = mul},
   {'/', = div},
@

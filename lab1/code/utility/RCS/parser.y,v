head	1.18;
access;
symbols;
locks;
comment	@ * @;


1.18
date	2018.10.25.20.08.35;	author -;	state -;
branches;
next	1.17;

1.17
date	2018.10.25.20.08.13;	author -;	state -;
branches;
next	1.16;

1.16
date	2018.10.19.18.27.51;	author -;	state -;
branches;
next	1.15;

1.15
date	2018.04.06.22.14.40;	author -;	state -;
branches;
next	1.14;

1.14
date	2018.04.06.22.14.03;	author -;	state -;
branches;
next	1.13;

1.13
date	2018.04.06.19.21.49;	author -;	state -;
branches;
next	1.12;

1.12
date	2018.04.06.19.19.45;	author -;	state -;
branches;
next	1.11;

1.11
date	2017.10.11.21.27.30;	author -;	state -;
branches;
next	1.10;

1.10
date	2016.10.18.20.31.19;	author -;	state -;
branches;
next	1.9;

1.9
date	2016.09.22.00.29.57;	author -;	state -;
branches;
next	1.8;

1.8
date	2016.04.11.22.29.06;	author -;	state -;
branches;
next	1.7;

1.7
date	2016.04.07.20.08.28;	author -;	state -;
branches;
next	1.6;

1.6
date	2016.04.07.20.05.33;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.10.16.18.22.25;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.10.16.18.20.38;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.09.23.21.06.11;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.10.23.00.10.23;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.10.10.01.32.37;	author -;	state -;
branches;
next	;


desc
@@


1.18
log
@-
@
text
@%{
// $Id: parser.y,v 1.17 2018-10-25 13:08:13-07 - - $
// Dummy parser for scanner project.

#include <cassert>

#include "lyutils.h"
#include "astree.h"

%}

%debug
%defines
%error-verbose
%token-table
%verbose

%token TOK_VOID TOK_INT TOK_STRING
%token TOK_IF TOK_ELSE TOK_WHILE TOK_RETURN TOK_STRUCT
%token TOK_NULL TOK_NEW TOK_ARRAY TOK_ARROW
%token TOK_EQ TOK_NE TOK_LT TOK_LE TOK_GT TOK_GE TOK_NOT
%token TOK_IDENT TOK_INTCON TOK_CHARCON TOK_STRINGCON

%token TOK_ROOT TOK_BLOCK TOK_CALL TOK_IFELSE TOK_INITDECL
%token TOK_POS TOK_NEG TOK_NEWARRAY TOK_TYPEID TOK_FIELD

%start program

%%

program : program token | ;
token   : '(' | ')' | '[' | ']' | '{' | '}' | ';' | ','
        | '=' | '+' | '-' | '*' | '/' | '%' | TOK_NOT
        | TOK_ROOT TOK_VOID | TOK_INT | TOK_STRING
        | TOK_IF | TOK_ELSE | TOK_WHILE | TOK_RETURN | TOK_STRUCT
        | TOK_NULL | TOK_NEW | TOK_ARRAY | TOK_ARROW
        | TOK_EQ | TOK_NE | TOK_LT | TOK_LE | TOK_GT | TOK_GE
        | TOK_IDENT | TOK_INTCON | TOK_CHARCON | TOK_STRINGCON
        ;

%%


const char *parser::get_tname (int symbol) {
   return yytname [YYTRANSLATE (symbol)];
}


bool is_defined_token (int symbol) {
   return YYTRANSLATE (symbol) > YYUNDEFTOK;
}

@


1.17
log
@-
@
text
@d2 1
a2 1
// $Id: parser.y,v 1.16 2018-10-19 11:27:51-07 - - $
d34 1
a34 1
        | TOK_ROOT TOK_VOID | TOK_CHAR | TOK_INT | TOK_STRING
@


1.16
log
@-
@
text
@d2 1
a2 1
// $Id: parser.y,v 1.15 2018-04-06 15:14:40-07 - - $
d18 1
a18 1
%token TOK_VOID TOK_CHAR TOK_INT TOK_STRING
@


1.15
log
@-
@
text
@d2 1
a2 1
// $Id: parser.y,v 1.14 2018-04-06 15:14:03-07 - - $
d21 1
a21 1
%token TOK_EQ TOK_NE TOK_LT TOK_LE TOK_GT TOK_GE
d33 1
a33 1
        | '=' | '+' | '-' | '*' | '/' | '%' | '!'
@


1.14
log
@-
@
text
@d2 1
a2 1
// $Id: parser.y,v 1.13 2018-04-06 12:21:49-07 - - $
d34 1
a34 1
        | TOK_VOID | TOK_CHAR | TOK_INT | TOK_STRING
a38 1
        | TOK_ORD | TOK_CHR | TOK_ROOT
a51 8

/*
static void* yycalloc (size_t size) {
   void* result = calloc (1, size);
   assert (result != nullptr);
   return result;
}
*/
@


1.13
log
@-
@
text
@d2 1
a2 1
// $Id: parser.y,v 1.12 2018-04-06 12:19:45-07 - - $
d20 1
a20 1
%token TOK_NULL TOK_NEW TOK_ARRAY
@


1.12
log
@-
@
text
@d2 1
a2 1
// $Id: parser.y,v 1.11 2017-10-11 14:27:30-07 - - $
d24 1
a24 1
%token TOK_BLOCK TOK_CALL TOK_IFELSE TOK_INITDECL
a25 1
%token TOK_ORD TOK_CHR TOK_ROOT
@


1.11
log
@-
@
text
@d2 1
a2 1
// $Id$
d33 1
a33 1
token   : '(' | ')' | '[' | ']' | '{' | '}' | ';' | ',' | '.'
d37 1
a37 1
        | TOK_NULL | TOK_NEW | TOK_ARRAY
@


1.10
log
@-
@
text
@d2 1
@


1.9
log
@-
@
text
@d45 1
a45 1
const char *get_yytname (int symbol) {
@


1.8
log
@-
@
text
@d17 1
a17 1
%token TOK_VOID TOK_BOOL TOK_CHAR TOK_INT TOK_STRING
d19 1
a19 1
%token TOK_FALSE TOK_TRUE TOK_NULL TOK_NEW TOK_ARRAY
d34 1
a34 1
        | TOK_VOID | TOK_BOOL | TOK_CHAR | TOK_INT | TOK_STRING
d36 1
a36 1
        | TOK_FALSE | TOK_TRUE | TOK_NULL | TOK_NEW | TOK_ARRAY
@


1.7
log
@-
@
text
@d54 1
d60 1
@


1.6
log
@-
@
text
@d43 1
@


1.5
log
@-
@
text
@d4 2
d55 1
a55 1
   assert (result != NULL);
@


1.4
log
@-
@
text
@d3 4
@


1.3
log
@-
@
text
@d42 11
@


1.2
log
@-
@
text
@d9 1
@


1.1
log
@-
@
text
@d18 1
d32 1
@

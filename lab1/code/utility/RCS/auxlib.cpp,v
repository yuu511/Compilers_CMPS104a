head	1.5;
access;
symbols;
locks;
comment	@// @;


1.5
date	2017.10.11.21.28.23;	author -;	state -;
branches;
next	1.4;

1.4
date	2017.10.04.23.00.20;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.10.06.23.42.53;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.04.07.20.04.52;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.10.04.01.22.05;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: auxlib.cpp,v 1.3 2017-10-11 14:28:14-07 - - $

#include <assert.h>
#include <errno.h>
#include <libgen.h>
#include <limits.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wait.h>

#include "auxlib.h"

string exec::execname;
int exec::exit_status = EXIT_SUCCESS;

const char* debugflags = "";
bool alldebugflags = false;

static void eprint_signal (const char* kind, int signal) {
   eprintf (", %s %d", kind, signal);
   const char* sigstr = strsignal (signal);
   if (sigstr != nullptr) fprintf (stderr, " %s", sigstr);
}

void eprint_status (const char* command, int status) {
   if (status == 0) return; 
   eprintf ("%s: status 0x%04X", command, status);
   if (WIFEXITED (status)) {
      eprintf (", exit %d", WEXITSTATUS (status));
   }
   if (WIFSIGNALED (status)) {
      eprint_signal ("Terminated", WTERMSIG (status));
      #ifdef WCOREDUMP
      if (WCOREDUMP (status)) eprintf (", core dumped");
      #endif
   }
   if (WIFSTOPPED (status)) {
      eprint_signal ("Stopped", WSTOPSIG (status));
   }
   if (WIFCONTINUED (status)) {
      eprintf (", Continued");
   }
   eprintf ("\n");
}

void veprintf (const char* format, va_list args) {
   assert (exec::execname.size() != 0);
   assert (format != nullptr);
   fflush (nullptr);
   if (strstr (format, "%:") == format) {
      fprintf (stderr, "%s: ", exec::execname.c_str());
      format += 2;
   }
   vfprintf (stderr, format, args);
   fflush (nullptr);
}

void eprintf (const char* format, ...) {
   va_list args;
   va_start (args, format);
   veprintf (format, args);
   va_end (args);
}

void errprintf (const char* format, ...) {
   va_list args;
   va_start (args, format);
   veprintf (format, args);
   va_end (args);
   exec::exit_status = EXIT_FAILURE;
}

void syserrprintf (const char* object) {
   errprintf ("%:%s: %s\n", object, strerror (errno));
}

void __stubprintf (const char* file, int line, const char* func,
                   const char* format, ...) {
   va_list args;
   fflush (nullptr);
   printf ("%s: %s[%d] %s: ", exec::execname.c_str(), file, line, func);
   va_start (args, format);
   vprintf (format, args);
   va_end (args);
   fflush (nullptr);
}     


void set_debugflags (const char* flags) {
   debugflags = flags;
   assert (debugflags != nullptr);
   if (strchr (debugflags, '@@') != nullptr) alldebugflags = true;
   DEBUGF ('x', "Debugflags = \"%s\", all = %d\n",
           debugflags, alldebugflags);
}

bool is_debugflag (char flag) {
   return alldebugflags or strchr (debugflags, flag) != nullptr;
}

void __debugprintf (char flag, const char* file, int line,
                    const char* func, const char* format, ...) {
   va_list args;
   if (not is_debugflag (flag)) return;
   fflush (nullptr);
   va_start (args, format);
   fprintf (stderr, "DEBUGF(%c): %s[%d] %s():\n",
             flag, file, line, func);
   vfprintf (stderr, format, args);
   va_end (args);
   fflush (nullptr);
}

@


1.4
log
@-
@
text
@d1 1
d93 1
@


1.3
log
@-
@
text
@d23 1
a23 1
   if (sigstr != NULL) fprintf (stderr, " %s", sigstr);
d49 2
a50 2
   assert (format != NULL);
   fflush (NULL);
d56 1
a56 1
   fflush (NULL);
d81 1
a81 1
   fflush (NULL);
d86 1
a86 1
   fflush (NULL);
d92 1
a92 1
   if (strchr (debugflags, '@@') != NULL) alldebugflags = true;
d98 1
a98 1
   return alldebugflags or strchr (debugflags, flag) != NULL;
d105 1
a105 1
   fflush (NULL);
d111 1
a111 1
   fflush (NULL);
@


1.2
log
@-
@
text
@d14 2
a15 8
static int exitstatus = EXIT_SUCCESS;
static const char* execname = NULL;
static const char* debugflags = "";
static bool alldebugflags = false;

void set_execname (char* argv0) {
   execname = basename (argv0);
}
d17 2
a18 4
const char* get_execname (void) {
   assert (execname != NULL);
   return execname;
}
a46 4
int get_exitstatus (void) {
   return exitstatus;
}

d48 1
a48 1
   assert (execname != NULL);
d52 1
a52 1
      fprintf (stderr, "%s: ", get_execname ());
d71 1
a71 1
   exitstatus = EXIT_FAILURE;
a77 5
void set_exitstatus (int newexitstatus) {
   if (exitstatus < newexitstatus) exitstatus = newexitstatus;
   DEBUGF ('x', "exitstatus = %d\n", exitstatus);
}

d82 1
a82 1
   printf ("%s: %s[%d] %s: ", execname, file, line, func);
@


1.1
log
@-
@
text
@a130 2
RCSC("$Id: auxlib.cc,v 1.2 2013-10-11 18:56:07-07 - - $")

@

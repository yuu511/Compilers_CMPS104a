Terminals unused in grammar

   TOK_IF
   TOK_ELSE
   TOK_WHILE
   TOK_RETURN
   TOK_NULLPTR
   TOK_ARROW
   TOK_ALLOC
   TOK_EQ
   TOK_NE
   TOK_LE
   TOK_GE
   TOK_NOT
   TOK_INTCON
   TOK_CHARCON
   TOK_STRINGCON
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_INITDECL


State 16 conflicts: 5 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | %empty

    4 structdef: sargs '}' ';'

    5 sargs: sargs type TOK_IDENT ';'
    6      | TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';'
    7      | TOK_STRUCT TOK_IDENT '{'

    8 type: plaintype
    9     | TOK_ARRAY TOK_LT plaintype TOK_GT

   10 plaintype: TOK_VOID
   11          | TOK_INT
   12          | TOK_STRING
   13          | TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT
   14          | %empty


Terminals, with rules where they appear

$end (0) 0
';' (59) 4 5 6
'{' (123) 6 7
'}' (125) 4
error (256)
TOK_VOID (258) 10
TOK_INT (259) 11
TOK_STRING (260) 12
TOK_IF (261)
TOK_ELSE (262)
TOK_WHILE (263)
TOK_RETURN (264)
TOK_STRUCT (265) 6 7 13
TOK_NULLPTR (266)
TOK_ARRAY (267) 9
TOK_ARROW (268)
TOK_ALLOC (269)
TOK_PTR (270) 13
TOK_EQ (271)
TOK_NE (272)
TOK_LT (273) 9 13
TOK_LE (274)
TOK_GT (275) 9 13
TOK_GE (276)
TOK_NOT (277)
TOK_IDENT (278) 5 6 7 13
TOK_INTCON (279)
TOK_CHARCON (280)
TOK_STRINGCON (281)
TOK_ROOT (282)
TOK_BLOCK (283)
TOK_CALL (284)
TOK_INITDECL (285)


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
start (35)
    on left: 1, on right: 0
program (36)
    on left: 2 3, on right: 1 2
structdef (37)
    on left: 4, on right: 2
sargs (38)
    on left: 5 6 7, on right: 4 5
type (39)
    on left: 8 9, on right: 5 6
plaintype (40)
    on left: 10 11 12 13 14, on right: 8 9


State 0

    0 $accept: . start $end

    $default  reduce using rule 3 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef

    TOK_STRUCT  shift, and go to state 4

    $default  reduce using rule 1 (start)

    structdef  go to state 5
    sargs      go to state 6


State 3

    0 $accept: start $end .

    $default  accept


State 4

    6 sargs: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT ';'
    7      | TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 7


State 5

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 6

    4 structdef: sargs . '}' ';'
    5 sargs: sargs . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_ARRAY   shift, and go to state 11
    TOK_PTR     shift, and go to state 12
    '}'         shift, and go to state 13

    $default  reduce using rule 14 (plaintype)

    type       go to state 14
    plaintype  go to state 15


State 7

    6 sargs: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT ';'
    7      | TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 16


State 8

   10 plaintype: TOK_VOID .

    $default  reduce using rule 10 (plaintype)


State 9

   11 plaintype: TOK_INT .

    $default  reduce using rule 11 (plaintype)


State 10

   12 plaintype: TOK_STRING .

    $default  reduce using rule 12 (plaintype)


State 11

    9 type: TOK_ARRAY . TOK_LT plaintype TOK_GT

    TOK_LT  shift, and go to state 17


State 12

   13 plaintype: TOK_PTR . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

    TOK_LT  shift, and go to state 18


State 13

    4 structdef: sargs '}' . ';'

    ';'  shift, and go to state 19


State 14

    5 sargs: sargs type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 20


State 15

    8 type: plaintype .

    $default  reduce using rule 8 (type)


State 16

    6 sargs: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT ';'
    7      | TOK_STRUCT TOK_IDENT '{' .

    TOK_VOID    shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_ARRAY   shift, and go to state 11
    TOK_PTR     shift, and go to state 12

    TOK_VOID    [reduce using rule 7 (sargs)]
    TOK_INT     [reduce using rule 7 (sargs)]
    TOK_STRING  [reduce using rule 7 (sargs)]
    TOK_ARRAY   [reduce using rule 7 (sargs)]
    TOK_PTR     [reduce using rule 7 (sargs)]
    TOK_IDENT   reduce using rule 7 (sargs)
    TOK_IDENT   [reduce using rule 14 (plaintype)]
    $default    reduce using rule 7 (sargs)

    type       go to state 21
    plaintype  go to state 15


State 17

    9 type: TOK_ARRAY TOK_LT . plaintype TOK_GT

    TOK_VOID    shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_PTR     shift, and go to state 12

    $default  reduce using rule 14 (plaintype)

    plaintype  go to state 22


State 18

   13 plaintype: TOK_PTR TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT

    TOK_STRUCT  shift, and go to state 23


State 19

    4 structdef: sargs '}' ';' .

    $default  reduce using rule 4 (structdef)


State 20

    5 sargs: sargs type TOK_IDENT . ';'

    ';'  shift, and go to state 24


State 21

    6 sargs: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 25


State 22

    9 type: TOK_ARRAY TOK_LT plaintype . TOK_GT

    TOK_GT  shift, and go to state 26


State 23

   13 plaintype: TOK_PTR TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT

    TOK_IDENT  shift, and go to state 27


State 24

    5 sargs: sargs type TOK_IDENT ';' .

    $default  reduce using rule 5 (sargs)


State 25

    6 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . ';'

    ';'  shift, and go to state 28


State 26

    9 type: TOK_ARRAY TOK_LT plaintype TOK_GT .

    $default  reduce using rule 9 (type)


State 27

   13 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 29


State 28

    6 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' .

    $default  reduce using rule 6 (sargs)


State 29

   13 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT .

    $default  reduce using rule 13 (plaintype)

Terminals unused in grammar

   TOK_IF
   TOK_ELSE
   TOK_RETURN
   TOK_LT
   TOK_GT
   TOK_NOT
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_INITDECL
   TOK_TYPE_ID
   TOK_VARDECL
   TOK_INDEX


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program statement
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: sargs '}' ';'
    8          | TOK_STRUCT TOK_IDENT '{' '}' ';'

    9 sargs: sargs type TOK_IDENT ';'
   10      | TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';'

   11 statement: vardecl
   12          | block
   13          | while

   14 type: plaintype
   15     | TOK_ARRAY '<' plaintype '>'

   16 plaintype: TOK_INT
   17          | TOK_VOID
   18          | TOK_STRING
   19          | TOK_PTR '<' TOK_STRUCT TOK_IDENT '>'

   20 vardecl: type TOK_IDENT '=' expr ';'
   21        | type TOK_IDENT ';'

   22 expr: expr '=' expr
   23     | expr '+' expr
   24     | expr '-' expr
   25     | expr '*' expr
   26     | expr '/' expr
   27     | expr '%' expr
   28     | expr TOK_EQ expr
   29     | expr TOK_NE expr
   30     | expr TOK_LE expr
   31     | expr TOK_GE expr
   32     | expr '<' expr
   33     | expr '>' expr
   34     | '-' expr
   35     | '+' expr
   36     | allocator
   37     | '(' expr ')'
   38     | call
   39     | variable
   40     | constant

   41 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr ')'
   42          | TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   43          | TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

   44 call: cargs ')'
   45     | TOK_IDENT '(' ')'

   46 cargs: TOK_IDENT '(' expr
   47      | cargs ',' expr

   48 variable: TOK_IDENT
   49         | expr '[' expr ']'
   50         | expr TOK_ARROW TOK_IDENT

   51 constant: TOK_INTCON
   52         | TOK_CHARCON
   53         | TOK_STRINGCON
   54         | TOK_NULLPTR

   55 block: bargs '}'
   56      | '{' '}'
   57      | ';'

   58 bargs: '{' statement
   59      | bargs statement

   60 while: TOK_WHILE '(' expr ')' statement


Terminals, with rules where they appear

$end (0) 0
'%' (37) 27
'(' (40) 37 41 42 43 45 46 60
')' (41) 37 41 42 43 44 45 60
'*' (42) 25
'+' (43) 23 35
',' (44) 47
'-' (45) 24 34
'/' (47) 26
';' (59) 5 7 8 9 10 20 21 57
'<' (60) 15 19 32 41 42 43
'=' (61) 20 22
'>' (62) 15 19 33 41 42 43
'[' (91) 49
']' (93) 49
'{' (123) 8 10 56 58
'}' (125) 4 7 8 55 56
error (256) 4 5
TOK_VOID (258) 17
TOK_INT (259) 16
TOK_STRING (260) 18
TOK_IF (261)
TOK_ELSE (262)
TOK_WHILE (263) 60
TOK_RETURN (264)
TOK_STRUCT (265) 8 10 19 42
TOK_NULLPTR (266) 54
TOK_ARRAY (267) 15 43
TOK_ARROW (268) 50
TOK_ALLOC (269) 41 42 43
TOK_PTR (270) 19
TOK_EQ (271) 28
TOK_NE (272) 29
TOK_LT (273)
TOK_LE (274) 30
TOK_GT (275)
TOK_GE (276) 31
TOK_NOT (277)
TOK_IDENT (278) 8 9 10 19 20 21 42 45 46 48 50
TOK_INTCON (279) 51
TOK_CHARCON (280) 52
TOK_STRINGCON (281) 41 53
TOK_ROOT (282)
TOK_BLOCK (283)
TOK_CALL (284)
TOK_INITDECL (285)
TOK_TYPE_ID (286)
TOK_VARDECL (287)
TOK_INDEX (288)
U_PLUS (289)
U_MINUS (290)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
start (53)
    on left: 1, on right: 0
program (54)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
structdef (55)
    on left: 7 8, on right: 2
sargs (56)
    on left: 9 10, on right: 7 9
statement (57)
    on left: 11 12 13, on right: 3 58 59 60
type (58)
    on left: 14 15, on right: 9 10 20 21
plaintype (59)
    on left: 16 17 18 19, on right: 14 15 43
vardecl (60)
    on left: 20 21, on right: 11
expr (61)
    on left: 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
    40, on right: 20 22 23 24 25 26 27 28 29 30 31 32 33 34 35 37 41
    43 46 47 49 50 60
allocator (62)
    on left: 41 42 43, on right: 36
call (63)
    on left: 44 45, on right: 38
cargs (64)
    on left: 46 47, on right: 44 47
variable (65)
    on left: 48 49 50, on right: 39
constant (66)
    on left: 51 52 53 54, on right: 40
block (67)
    on left: 55 56 57, on right: 12
bargs (68)
    on left: 58 59, on right: 55 59
while (69)
    on left: 60, on right: 13


State 0

    0 $accept: . start $end

    $default  reduce using rule 6 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . statement
    4        | program . error '}'
    5        | program . error ';'

    error       shift, and go to state 4
    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_STRUCT  shift, and go to state 9
    TOK_ARRAY   shift, and go to state 10
    TOK_PTR     shift, and go to state 11
    ';'         shift, and go to state 12
    '{'         shift, and go to state 13

    $end  reduce using rule 1 (start)

    structdef  go to state 14
    sargs      go to state 15
    statement  go to state 16
    type       go to state 17
    plaintype  go to state 18
    vardecl    go to state 19
    block      go to state 20
    bargs      go to state 21
    while      go to state 22


State 3

    0 $accept: start $end .

    $default  accept


State 4

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 23
    ';'  shift, and go to state 24


State 5

   17 plaintype: TOK_VOID .

    $default  reduce using rule 17 (plaintype)


State 6

   16 plaintype: TOK_INT .

    $default  reduce using rule 16 (plaintype)


State 7

   18 plaintype: TOK_STRING .

    $default  reduce using rule 18 (plaintype)


State 8

   60 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 25


State 9

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}' ';'
   10 sargs: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 26


State 10

   15 type: TOK_ARRAY . '<' plaintype '>'

    '<'  shift, and go to state 27


State 11

   19 plaintype: TOK_PTR . '<' TOK_STRUCT TOK_IDENT '>'

    '<'  shift, and go to state 28


State 12

   57 block: ';' .

    $default  reduce using rule 57 (block)


State 13

   56 block: '{' . '}'
   58 bargs: '{' . statement

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_ARRAY   shift, and go to state 10
    TOK_PTR     shift, and go to state 11
    '}'         shift, and go to state 29
    ';'         shift, and go to state 12
    '{'         shift, and go to state 13

    statement  go to state 30
    type       go to state 17
    plaintype  go to state 18
    vardecl    go to state 19
    block      go to state 20
    bargs      go to state 21
    while      go to state 22


State 14

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 15

    7 structdef: sargs . '}' ';'
    9 sargs: sargs . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 10
    TOK_PTR     shift, and go to state 11
    '}'         shift, and go to state 31

    type       go to state 32
    plaintype  go to state 18


State 16

    3 program: program statement .

    $default  reduce using rule 3 (program)


State 17

   20 vardecl: type . TOK_IDENT '=' expr ';'
   21        | type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 33


State 18

   14 type: plaintype .

    $default  reduce using rule 14 (type)


State 19

   11 statement: vardecl .

    $default  reduce using rule 11 (statement)


State 20

   12 statement: block .

    $default  reduce using rule 12 (statement)


State 21

   55 block: bargs . '}'
   59 bargs: bargs . statement

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_ARRAY   shift, and go to state 10
    TOK_PTR     shift, and go to state 11
    '}'         shift, and go to state 34
    ';'         shift, and go to state 12
    '{'         shift, and go to state 13

    statement  go to state 35
    type       go to state 17
    plaintype  go to state 18
    vardecl    go to state 19
    block      go to state 20
    bargs      go to state 21
    while      go to state 22


State 22

   13 statement: while .

    $default  reduce using rule 13 (statement)


State 23

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 24

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 25

   60 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 45
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 26

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT ';'

    '{'  shift, and go to state 51


State 27

   15 type: TOK_ARRAY '<' . plaintype '>'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 11

    plaintype  go to state 52


State 28

   19 plaintype: TOK_PTR '<' . TOK_STRUCT TOK_IDENT '>'

    TOK_STRUCT  shift, and go to state 53


State 29

   56 block: '{' '}' .

    $default  reduce using rule 56 (block)


State 30

   58 bargs: '{' statement .

    $default  reduce using rule 58 (bargs)


State 31

    7 structdef: sargs '}' . ';'

    ';'  shift, and go to state 54


State 32

    9 sargs: sargs type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 55


State 33

   20 vardecl: type TOK_IDENT . '=' expr ';'
   21        | type TOK_IDENT . ';'

    '='  shift, and go to state 56
    ';'  shift, and go to state 57


State 34

   55 block: bargs '}' .

    $default  reduce using rule 55 (block)


State 35

   59 bargs: bargs statement .

    $default  reduce using rule 59 (bargs)


State 36

   54 constant: TOK_NULLPTR .

    $default  reduce using rule 54 (constant)


State 37

   41 allocator: TOK_ALLOC . '<' TOK_STRINGCON '>' '(' expr ')'
   42          | TOK_ALLOC . '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   43          | TOK_ALLOC . '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 58


State 38

   45 call: TOK_IDENT . '(' ')'
   46 cargs: TOK_IDENT . '(' expr
   48 variable: TOK_IDENT .

    '('  shift, and go to state 59

    $default  reduce using rule 48 (variable)


State 39

   51 constant: TOK_INTCON .

    $default  reduce using rule 51 (constant)


State 40

   52 constant: TOK_CHARCON .

    $default  reduce using rule 52 (constant)


State 41

   53 constant: TOK_STRINGCON .

    $default  reduce using rule 53 (constant)


State 42

   35 expr: '+' . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 60
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 43

   34 expr: '-' . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 61
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 44

   37 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 62
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 45

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT
   60 while: TOK_WHILE '(' expr . ')' statement

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ')'        shift, and go to state 77


State 46

   36 expr: allocator .

    $default  reduce using rule 36 (expr)


State 47

   38 expr: call .

    $default  reduce using rule 38 (expr)


State 48

   44 call: cargs . ')'
   47 cargs: cargs . ',' expr

    ')'  shift, and go to state 78
    ','  shift, and go to state 79


State 49

   39 expr: variable .

    $default  reduce using rule 39 (expr)


State 50

   40 expr: constant .

    $default  reduce using rule 40 (expr)


State 51

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 10
    TOK_PTR     shift, and go to state 11
    '}'         shift, and go to state 80

    type       go to state 81
    plaintype  go to state 18


State 52

   15 type: TOK_ARRAY '<' plaintype . '>'

    '>'  shift, and go to state 82


State 53

   19 plaintype: TOK_PTR '<' TOK_STRUCT . TOK_IDENT '>'

    TOK_IDENT  shift, and go to state 83


State 54

    7 structdef: sargs '}' ';' .

    $default  reduce using rule 7 (structdef)


State 55

    9 sargs: sargs type TOK_IDENT . ';'

    ';'  shift, and go to state 84


State 56

   20 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 85
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 57

   21 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 21 (vardecl)


State 58

   41 allocator: TOK_ALLOC '<' . TOK_STRINGCON '>' '(' expr ')'
   42          | TOK_ALLOC '<' . TOK_STRUCT TOK_IDENT '>' '(' ')'
   43          | TOK_ALLOC '<' . TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    TOK_STRUCT     shift, and go to state 86
    TOK_ARRAY      shift, and go to state 87
    TOK_STRINGCON  shift, and go to state 88


State 59

   45 call: TOK_IDENT '(' . ')'
   46 cargs: TOK_IDENT '(' . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44
    ')'            shift, and go to state 89

    expr       go to state 90
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 60

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   35     | '+' expr .
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '['        shift, and go to state 76

    $default  reduce using rule 35 (expr)


State 61

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   34     | '-' expr .
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '['        shift, and go to state 76

    $default  reduce using rule 34 (expr)


State 62

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   37     | '(' expr . ')'
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ')'        shift, and go to state 91


State 63

   50 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 92


State 64

   28 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 93
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 65

   29 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 94
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 66

   30 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 95
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 67

   31 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 96
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 68

   22 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 97
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 69

   32 expr: expr '<' . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 98
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 70

   33 expr: expr '>' . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 99
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 71

   23 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 100
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 72

   24 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 101
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 73

   25 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 102
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 74

   26 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 103
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 75

   27 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 104
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 76

   49 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 105
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 77

   60 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_ARRAY   shift, and go to state 10
    TOK_PTR     shift, and go to state 11
    ';'         shift, and go to state 12
    '{'         shift, and go to state 13

    statement  go to state 106
    type       go to state 17
    plaintype  go to state 18
    vardecl    go to state 19
    block      go to state 20
    bargs      go to state 21
    while      go to state 22


State 78

   44 call: cargs ')' .

    $default  reduce using rule 44 (call)


State 79

   47 cargs: cargs ',' . expr

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 107
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 80

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' . ';'

    ';'  shift, and go to state 108


State 81

   10 sargs: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 109


State 82

   15 type: TOK_ARRAY '<' plaintype '>' .

    $default  reduce using rule 15 (type)


State 83

   19 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT . '>'

    '>'  shift, and go to state 110


State 84

    9 sargs: sargs type TOK_IDENT ';' .

    $default  reduce using rule 9 (sargs)


State 85

   20 vardecl: type TOK_IDENT '=' expr . ';'
   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ';'        shift, and go to state 111


State 86

   42 allocator: TOK_ALLOC '<' TOK_STRUCT . TOK_IDENT '>' '(' ')'

    TOK_IDENT  shift, and go to state 112


State 87

   43 allocator: TOK_ALLOC '<' TOK_ARRAY . '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 113


State 88

   41 allocator: TOK_ALLOC '<' TOK_STRINGCON . '>' '(' expr ')'

    '>'  shift, and go to state 114


State 89

   45 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 45 (call)


State 90

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   46 cargs: TOK_IDENT '(' expr .
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 46 (cargs)


State 91

   37 expr: '(' expr ')' .

    $default  reduce using rule 37 (expr)


State 92

   50 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 50 (variable)


State 93

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   28     | expr TOK_EQ expr .
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 28 (expr)


State 94

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   29     | expr TOK_NE expr .
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 29 (expr)


State 95

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   30     | expr TOK_LE expr .
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 30 (expr)


State 96

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   31     | expr TOK_GE expr .
   32     | expr . '<' expr
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 31 (expr)


State 97

   22 expr: expr . '=' expr
   22     | expr '=' expr .
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 22 (expr)


State 98

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   32     | expr '<' expr .
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 32 (expr)


State 99

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   33     | expr '>' expr .
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 33 (expr)


State 100

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   23     | expr '+' expr .
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 23 (expr)


State 101

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   24     | expr '-' expr .
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 24 (expr)


State 102

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   25     | expr '*' expr .
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '['        shift, and go to state 76

    $default  reduce using rule 25 (expr)


State 103

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   26     | expr '/' expr .
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '['        shift, and go to state 76

    $default  reduce using rule 26 (expr)


State 104

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   27     | expr '%' expr .
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '['        shift, and go to state 76

    $default  reduce using rule 27 (expr)


State 105

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   49 variable: expr . '[' expr ']'
   49         | expr '[' expr . ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ']'        shift, and go to state 115


State 106

   60 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 60 (while)


State 107

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   47 cargs: cargs ',' expr .
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 47 (cargs)


State 108

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' ';' .

    $default  reduce using rule 8 (structdef)


State 109

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . ';'

    ';'  shift, and go to state 116


State 110

   19 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT '>' .

    $default  reduce using rule 19 (plaintype)


State 111

   20 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 20 (vardecl)


State 112

   42 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT . '>' '(' ')'

    '>'  shift, and go to state 117


State 113

   43 allocator: TOK_ALLOC '<' TOK_ARRAY '<' . plaintype '>' '>' '(' expr ')'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 11

    plaintype  go to state 118


State 114

   41 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' . '(' expr ')'

    '('  shift, and go to state 119


State 115

   49 variable: expr '[' expr ']' .

    $default  reduce using rule 49 (variable)


State 116

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' .

    $default  reduce using rule 10 (sargs)


State 117

   42 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' . '(' ')'

    '('  shift, and go to state 120


State 118

   43 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype . '>' '>' '(' expr ')'

    '>'  shift, and go to state 121


State 119

   41 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 122
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 120

   42 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' . ')'

    ')'  shift, and go to state 123


State 121

   43 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' . '>' '(' expr ')'

    '>'  shift, and go to state 124


State 122

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   41 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr . ')'
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ')'        shift, and go to state 125


State 123

   42 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')' .

    $default  reduce using rule 42 (allocator)


State 124

   43 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' . '(' expr ')'

    '('  shift, and go to state 126


State 125

   41 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr ')' .

    $default  reduce using rule 41 (allocator)


State 126

   43 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 36
    TOK_ALLOC      shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    '+'            shift, and go to state 42
    '-'            shift, and go to state 43
    '('            shift, and go to state 44

    expr       go to state 127
    allocator  go to state 46
    call       go to state 47
    cargs      go to state 48
    variable   go to state 49
    constant   go to state 50


State 127

   22 expr: expr . '=' expr
   23     | expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | expr . TOK_EQ expr
   29     | expr . TOK_NE expr
   30     | expr . TOK_LE expr
   31     | expr . TOK_GE expr
   32     | expr . '<' expr
   33     | expr . '>' expr
   43 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr . ')'
   49 variable: expr . '[' expr ']'
   50         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ')'        shift, and go to state 128


State 128

   43 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')' .

    $default  reduce using rule 43 (allocator)

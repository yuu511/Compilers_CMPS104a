Terminals unused in grammar

   TOK_IF
   TOK_ELSE
   TOK_WHILE
   TOK_RETURN
   TOK_NULLPTR
   TOK_ARROW
   TOK_ALLOC
   TOK_EQ
   TOK_NE
   TOK_LT
   TOK_LE
   TOK_GT
   TOK_GE
   TOK_NOT
   TOK_INTCON
   TOK_CHARCON
   TOK_STRINGCON
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_INITDECL
   TOK_TYPE_ID
   TOK_VARDECL
   '+'
   '-'
   '*'
   '/'
   '%'
   U_PLUS
   U_MINUS
   '['


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program statement
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: sargs '}' ';'
    8          | TOK_STRUCT TOK_IDENT '{' '}' ';'

    9 sargs: sargs type TOK_IDENT ';'
   10      | TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';'

   11 type: plaintype
   12     | TOK_ARRAY '<' plaintype '>'

   13 plaintype: TOK_VOID
   14          | TOK_INT
   15          | TOK_STRING
   16          | TOK_PTR '<' TOK_STRUCT TOK_IDENT '>'

   17 statement: vardecl

   18 vardecl: type TOK_IDENT ';'
   19        | type TOK_IDENT '=' expr

   20 expr: %empty


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'*' (42)
'+' (43)
'-' (45)
'/' (47)
';' (59) 5 7 8 9 10 18
'<' (60) 12 16
'=' (61) 19
'>' (62) 12 16
'[' (91)
'{' (123) 8 10
'}' (125) 4 7 8
error (256) 4 5
TOK_VOID (258) 13
TOK_INT (259) 14
TOK_STRING (260) 15
TOK_IF (261)
TOK_ELSE (262)
TOK_WHILE (263)
TOK_RETURN (264)
TOK_STRUCT (265) 8 10 16
TOK_NULLPTR (266)
TOK_ARRAY (267) 12
TOK_ARROW (268)
TOK_ALLOC (269)
TOK_PTR (270) 16
TOK_EQ (271)
TOK_NE (272)
TOK_LT (273)
TOK_LE (274)
TOK_GT (275)
TOK_GE (276)
TOK_NOT (277)
TOK_IDENT (278) 8 9 10 16 18 19
TOK_INTCON (279)
TOK_CHARCON (280)
TOK_STRINGCON (281)
TOK_ROOT (282)
TOK_BLOCK (283)
TOK_CALL (284)
TOK_INITDECL (285)
TOK_TYPE_ID (286)
TOK_VARDECL (287)
U_PLUS (288)
U_MINUS (289)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
start (48)
    on left: 1, on right: 0
program (49)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
structdef (50)
    on left: 7 8, on right: 2
sargs (51)
    on left: 9 10, on right: 7 9
type (52)
    on left: 11 12, on right: 9 10 18 19
plaintype (53)
    on left: 13 14 15 16, on right: 11 12
statement (54)
    on left: 17, on right: 3
vardecl (55)
    on left: 18 19, on right: 17
expr (56)
    on left: 20, on right: 19


State 0

    0 $accept: . start $end

    $default  reduce using rule 6 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . statement
    4        | program . error '}'
    5        | program . error ';'

    error       shift, and go to state 4
    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_STRUCT  shift, and go to state 8
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10

    $end  reduce using rule 1 (start)

    structdef  go to state 11
    sargs      go to state 12
    type       go to state 13
    plaintype  go to state 14
    statement  go to state 15
    vardecl    go to state 16


State 3

    0 $accept: start $end .

    $default  accept


State 4

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 17
    ';'  shift, and go to state 18


State 5

   13 plaintype: TOK_VOID .

    $default  reduce using rule 13 (plaintype)


State 6

   14 plaintype: TOK_INT .

    $default  reduce using rule 14 (plaintype)


State 7

   15 plaintype: TOK_STRING .

    $default  reduce using rule 15 (plaintype)


State 8

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}' ';'
   10 sargs: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 19


State 9

   12 type: TOK_ARRAY . '<' plaintype '>'

    '<'  shift, and go to state 20


State 10

   16 plaintype: TOK_PTR . '<' TOK_STRUCT TOK_IDENT '>'

    '<'  shift, and go to state 21


State 11

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 12

    7 structdef: sargs . '}' ';'
    9 sargs: sargs . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10
    '}'         shift, and go to state 22

    type       go to state 23
    plaintype  go to state 14


State 13

   18 vardecl: type . TOK_IDENT ';'
   19        | type . TOK_IDENT '=' expr

    TOK_IDENT  shift, and go to state 24


State 14

   11 type: plaintype .

    $default  reduce using rule 11 (type)


State 15

    3 program: program statement .

    $default  reduce using rule 3 (program)


State 16

   17 statement: vardecl .

    $default  reduce using rule 17 (statement)


State 17

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 18

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 19

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT ';'

    '{'  shift, and go to state 25


State 20

   12 type: TOK_ARRAY '<' . plaintype '>'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 10

    plaintype  go to state 26


State 21

   16 plaintype: TOK_PTR '<' . TOK_STRUCT TOK_IDENT '>'

    TOK_STRUCT  shift, and go to state 27


State 22

    7 structdef: sargs '}' . ';'

    ';'  shift, and go to state 28


State 23

    9 sargs: sargs type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 29


State 24

   18 vardecl: type TOK_IDENT . ';'
   19        | type TOK_IDENT . '=' expr

    '='  shift, and go to state 30
    ';'  shift, and go to state 31


State 25

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10
    '}'         shift, and go to state 32

    type       go to state 33
    plaintype  go to state 14


State 26

   12 type: TOK_ARRAY '<' plaintype . '>'

    '>'  shift, and go to state 34


State 27

   16 plaintype: TOK_PTR '<' TOK_STRUCT . TOK_IDENT '>'

    TOK_IDENT  shift, and go to state 35


State 28

    7 structdef: sargs '}' ';' .

    $default  reduce using rule 7 (structdef)


State 29

    9 sargs: sargs type TOK_IDENT . ';'

    ';'  shift, and go to state 36


State 30

   19 vardecl: type TOK_IDENT '=' . expr

    $default  reduce using rule 20 (expr)

    expr  go to state 37


State 31

   18 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 18 (vardecl)


State 32

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' . ';'

    ';'  shift, and go to state 38


State 33

   10 sargs: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 39


State 34

   12 type: TOK_ARRAY '<' plaintype '>' .

    $default  reduce using rule 12 (type)


State 35

   16 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT . '>'

    '>'  shift, and go to state 40


State 36

    9 sargs: sargs type TOK_IDENT ';' .

    $default  reduce using rule 9 (sargs)


State 37

   19 vardecl: type TOK_IDENT '=' expr .

    $default  reduce using rule 19 (vardecl)


State 38

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' ';' .

    $default  reduce using rule 8 (structdef)


State 39

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . ';'

    ';'  shift, and go to state 41


State 40

   16 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT '>' .

    $default  reduce using rule 16 (plaintype)


State 41

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' .

    $default  reduce using rule 10 (sargs)

Terminals unused in grammar

   TOK_IF
   TOK_ELSE
   TOK_WHILE
   TOK_RETURN
   TOK_LT
   TOK_GT
   TOK_NOT
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_INITDECL
   TOK_TYPE_ID
   TOK_VARDECL
   TOK_INDEX


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program statement
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: sargs '}' ';'
    8          | TOK_STRUCT TOK_IDENT '{' '}' ';'

    9 sargs: sargs type TOK_IDENT ';'
   10      | TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';'

   11 type: plaintype
   12     | TOK_ARRAY '<' plaintype '>'

   13 plaintype: TOK_INT
   14          | TOK_VOID
   15          | TOK_STRING
   16          | TOK_PTR '<' TOK_STRUCT TOK_IDENT '>'

   17 statement: vardecl

   18 vardecl: type TOK_IDENT '=' expr ';'
   19        | type TOK_IDENT ';'

   20 expr: expr '=' expr
   21     | expr '+' expr
   22     | expr '-' expr
   23     | expr '*' expr
   24     | expr '/' expr
   25     | expr '%' expr
   26     | expr TOK_EQ expr
   27     | expr TOK_NE expr
   28     | expr TOK_LE expr
   29     | expr TOK_GE expr
   30     | expr '<' expr
   31     | expr '>' expr
   32     | '-' expr
   33     | '+' expr
   34     | allocator
   35     | '(' expr ')'
   36     | call
   37     | variable
   38     | constant

   39 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr ')'
   40          | TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   41          | TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

   42 call: cargs ')'
   43     | TOK_IDENT '(' ')'

   44 cargs: TOK_IDENT '(' expr
   45      | cargs ',' expr

   46 variable: TOK_IDENT
   47         | expr '[' expr ']'
   48         | expr TOK_ARROW TOK_IDENT

   49 constant: TOK_INTCON
   50         | TOK_CHARCON
   51         | TOK_STRINGCON
   52         | TOK_NULLPTR


Terminals, with rules where they appear

$end (0) 0
'%' (37) 25
'(' (40) 35 39 40 41 43 44
')' (41) 35 39 40 41 42 43
'*' (42) 23
'+' (43) 21 33
',' (44) 45
'-' (45) 22 32
'/' (47) 24
';' (59) 5 7 8 9 10 18 19
'<' (60) 12 16 30 39 40 41
'=' (61) 18 20
'>' (62) 12 16 31 39 40 41
'[' (91) 47
']' (93) 47
'{' (123) 8 10
'}' (125) 4 7 8
error (256) 4 5
TOK_VOID (258) 14
TOK_INT (259) 13
TOK_STRING (260) 15
TOK_IF (261)
TOK_ELSE (262)
TOK_WHILE (263)
TOK_RETURN (264)
TOK_STRUCT (265) 8 10 16 40
TOK_NULLPTR (266) 52
TOK_ARRAY (267) 12 41
TOK_ARROW (268) 48
TOK_ALLOC (269) 39 40 41
TOK_PTR (270) 16
TOK_EQ (271) 26
TOK_NE (272) 27
TOK_LT (273)
TOK_LE (274) 28
TOK_GT (275)
TOK_GE (276) 29
TOK_NOT (277)
TOK_IDENT (278) 8 9 10 16 18 19 40 43 44 46 48
TOK_INTCON (279) 49
TOK_CHARCON (280) 50
TOK_STRINGCON (281) 39 51
TOK_ROOT (282)
TOK_BLOCK (283)
TOK_CALL (284)
TOK_INITDECL (285)
TOK_TYPE_ID (286)
TOK_VARDECL (287)
TOK_INDEX (288)
U_PLUS (289)
U_MINUS (290)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
start (53)
    on left: 1, on right: 0
program (54)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
structdef (55)
    on left: 7 8, on right: 2
sargs (56)
    on left: 9 10, on right: 7 9
type (57)
    on left: 11 12, on right: 9 10 18 19
plaintype (58)
    on left: 13 14 15 16, on right: 11 12 41
statement (59)
    on left: 17, on right: 3
vardecl (60)
    on left: 18 19, on right: 17
expr (61)
    on left: 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37
    38, on right: 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 35 39
    41 44 45 47 48
allocator (62)
    on left: 39 40 41, on right: 34
call (63)
    on left: 42 43, on right: 36
cargs (64)
    on left: 44 45, on right: 42 45
variable (65)
    on left: 46 47 48, on right: 37
constant (66)
    on left: 49 50 51 52, on right: 38


State 0

    0 $accept: . start $end

    $default  reduce using rule 6 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . statement
    4        | program . error '}'
    5        | program . error ';'

    error       shift, and go to state 4
    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_STRUCT  shift, and go to state 8
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10

    $end  reduce using rule 1 (start)

    structdef  go to state 11
    sargs      go to state 12
    type       go to state 13
    plaintype  go to state 14
    statement  go to state 15
    vardecl    go to state 16


State 3

    0 $accept: start $end .

    $default  accept


State 4

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 17
    ';'  shift, and go to state 18


State 5

   14 plaintype: TOK_VOID .

    $default  reduce using rule 14 (plaintype)


State 6

   13 plaintype: TOK_INT .

    $default  reduce using rule 13 (plaintype)


State 7

   15 plaintype: TOK_STRING .

    $default  reduce using rule 15 (plaintype)


State 8

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}' ';'
   10 sargs: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 19


State 9

   12 type: TOK_ARRAY . '<' plaintype '>'

    '<'  shift, and go to state 20


State 10

   16 plaintype: TOK_PTR . '<' TOK_STRUCT TOK_IDENT '>'

    '<'  shift, and go to state 21


State 11

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 12

    7 structdef: sargs . '}' ';'
    9 sargs: sargs . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10
    '}'         shift, and go to state 22

    type       go to state 23
    plaintype  go to state 14


State 13

   18 vardecl: type . TOK_IDENT '=' expr ';'
   19        | type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 24


State 14

   11 type: plaintype .

    $default  reduce using rule 11 (type)


State 15

    3 program: program statement .

    $default  reduce using rule 3 (program)


State 16

   17 statement: vardecl .

    $default  reduce using rule 17 (statement)


State 17

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 18

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 19

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT ';'

    '{'  shift, and go to state 25


State 20

   12 type: TOK_ARRAY '<' . plaintype '>'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 10

    plaintype  go to state 26


State 21

   16 plaintype: TOK_PTR '<' . TOK_STRUCT TOK_IDENT '>'

    TOK_STRUCT  shift, and go to state 27


State 22

    7 structdef: sargs '}' . ';'

    ';'  shift, and go to state 28


State 23

    9 sargs: sargs type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 29


State 24

   18 vardecl: type TOK_IDENT . '=' expr ';'
   19        | type TOK_IDENT . ';'

    '='  shift, and go to state 30
    ';'  shift, and go to state 31


State 25

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10
    '}'         shift, and go to state 32

    type       go to state 33
    plaintype  go to state 14


State 26

   12 type: TOK_ARRAY '<' plaintype . '>'

    '>'  shift, and go to state 34


State 27

   16 plaintype: TOK_PTR '<' TOK_STRUCT . TOK_IDENT '>'

    TOK_IDENT  shift, and go to state 35


State 28

    7 structdef: sargs '}' ';' .

    $default  reduce using rule 7 (structdef)


State 29

    9 sargs: sargs type TOK_IDENT . ';'

    ';'  shift, and go to state 36


State 30

   18 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 46
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 31

   19 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 19 (vardecl)


State 32

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' . ';'

    ';'  shift, and go to state 52


State 33

   10 sargs: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 53


State 34

   12 type: TOK_ARRAY '<' plaintype '>' .

    $default  reduce using rule 12 (type)


State 35

   16 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT . '>'

    '>'  shift, and go to state 54


State 36

    9 sargs: sargs type TOK_IDENT ';' .

    $default  reduce using rule 9 (sargs)


State 37

   52 constant: TOK_NULLPTR .

    $default  reduce using rule 52 (constant)


State 38

   39 allocator: TOK_ALLOC . '<' TOK_STRINGCON '>' '(' expr ')'
   40          | TOK_ALLOC . '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   41          | TOK_ALLOC . '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 55


State 39

   43 call: TOK_IDENT . '(' ')'
   44 cargs: TOK_IDENT . '(' expr
   46 variable: TOK_IDENT .

    '('  shift, and go to state 56

    $default  reduce using rule 46 (variable)


State 40

   49 constant: TOK_INTCON .

    $default  reduce using rule 49 (constant)


State 41

   50 constant: TOK_CHARCON .

    $default  reduce using rule 50 (constant)


State 42

   51 constant: TOK_STRINGCON .

    $default  reduce using rule 51 (constant)


State 43

   33 expr: '+' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 57
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 44

   32 expr: '-' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 58
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 45

   35 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 59
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 46

   18 vardecl: type TOK_IDENT '=' expr . ';'
   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    TOK_EQ     shift, and go to state 61
    TOK_NE     shift, and go to state 62
    TOK_LE     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '<'        shift, and go to state 66
    '>'        shift, and go to state 67
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73
    ';'        shift, and go to state 74


State 47

   34 expr: allocator .

    $default  reduce using rule 34 (expr)


State 48

   36 expr: call .

    $default  reduce using rule 36 (expr)


State 49

   42 call: cargs . ')'
   45 cargs: cargs . ',' expr

    ')'  shift, and go to state 75
    ','  shift, and go to state 76


State 50

   37 expr: variable .

    $default  reduce using rule 37 (expr)


State 51

   38 expr: constant .

    $default  reduce using rule 38 (expr)


State 52

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' ';' .

    $default  reduce using rule 8 (structdef)


State 53

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . ';'

    ';'  shift, and go to state 77


State 54

   16 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT '>' .

    $default  reduce using rule 16 (plaintype)


State 55

   39 allocator: TOK_ALLOC '<' . TOK_STRINGCON '>' '(' expr ')'
   40          | TOK_ALLOC '<' . TOK_STRUCT TOK_IDENT '>' '(' ')'
   41          | TOK_ALLOC '<' . TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    TOK_STRUCT     shift, and go to state 78
    TOK_ARRAY      shift, and go to state 79
    TOK_STRINGCON  shift, and go to state 80


State 56

   43 call: TOK_IDENT '(' . ')'
   44 cargs: TOK_IDENT '(' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45
    ')'            shift, and go to state 81

    expr       go to state 82
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 57

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   33     | '+' expr .
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    '['        shift, and go to state 73

    $default  reduce using rule 33 (expr)


State 58

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | '-' expr .
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    '['        shift, and go to state 73

    $default  reduce using rule 32 (expr)


State 59

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   35     | '(' expr . ')'
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    TOK_EQ     shift, and go to state 61
    TOK_NE     shift, and go to state 62
    TOK_LE     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '<'        shift, and go to state 66
    '>'        shift, and go to state 67
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73
    ')'        shift, and go to state 83


State 60

   48 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 84


State 61

   26 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 85
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 62

   27 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 86
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 63

   28 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 87
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 64

   29 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 88
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 65

   20 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 89
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 66

   30 expr: expr '<' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 90
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 67

   31 expr: expr '>' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 91
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 68

   21 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 92
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 69

   22 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 93
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 70

   23 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 94
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 71

   24 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 95
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 72

   25 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 96
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 73

   47 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 97
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 74

   18 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 18 (vardecl)


State 75

   42 call: cargs ')' .

    $default  reduce using rule 42 (call)


State 76

   45 cargs: cargs ',' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 98
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 77

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' .

    $default  reduce using rule 10 (sargs)


State 78

   40 allocator: TOK_ALLOC '<' TOK_STRUCT . TOK_IDENT '>' '(' ')'

    TOK_IDENT  shift, and go to state 99


State 79

   41 allocator: TOK_ALLOC '<' TOK_ARRAY . '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 100


State 80

   39 allocator: TOK_ALLOC '<' TOK_STRINGCON . '>' '(' expr ')'

    '>'  shift, and go to state 101


State 81

   43 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 43 (call)


State 82

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   44 cargs: TOK_IDENT '(' expr .
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    TOK_EQ     shift, and go to state 61
    TOK_NE     shift, and go to state 62
    TOK_LE     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '<'        shift, and go to state 66
    '>'        shift, and go to state 67
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    $default  reduce using rule 44 (cargs)


State 83

   35 expr: '(' expr ')' .

    $default  reduce using rule 35 (expr)


State 84

   48 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 48 (variable)


State 85

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   26     | expr TOK_EQ expr .
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    $default  reduce using rule 26 (expr)


State 86

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   27     | expr TOK_NE expr .
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    $default  reduce using rule 27 (expr)


State 87

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   28     | expr TOK_LE expr .
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    $default  reduce using rule 28 (expr)


State 88

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   29     | expr TOK_GE expr .
   30     | expr . '<' expr
   31     | expr . '>' expr
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    $default  reduce using rule 29 (expr)


State 89

   20 expr: expr . '=' expr
   20     | expr '=' expr .
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    TOK_EQ     shift, and go to state 61
    TOK_NE     shift, and go to state 62
    TOK_LE     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '<'        shift, and go to state 66
    '>'        shift, and go to state 67
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    $default  reduce using rule 20 (expr)


State 90

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   30     | expr '<' expr .
   31     | expr . '>' expr
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    $default  reduce using rule 30 (expr)


State 91

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   31     | expr '>' expr .
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    $default  reduce using rule 31 (expr)


State 92

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   21     | expr '+' expr .
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    $default  reduce using rule 21 (expr)


State 93

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   22     | expr '-' expr .
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    $default  reduce using rule 22 (expr)


State 94

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   23     | expr '*' expr .
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    '['        shift, and go to state 73

    $default  reduce using rule 23 (expr)


State 95

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   24     | expr '/' expr .
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    '['        shift, and go to state 73

    $default  reduce using rule 24 (expr)


State 96

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   25     | expr '%' expr .
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    '['        shift, and go to state 73

    $default  reduce using rule 25 (expr)


State 97

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   47 variable: expr . '[' expr ']'
   47         | expr '[' expr . ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    TOK_EQ     shift, and go to state 61
    TOK_NE     shift, and go to state 62
    TOK_LE     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '<'        shift, and go to state 66
    '>'        shift, and go to state 67
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73
    ']'        shift, and go to state 102


State 98

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   45 cargs: cargs ',' expr .
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    TOK_EQ     shift, and go to state 61
    TOK_NE     shift, and go to state 62
    TOK_LE     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '<'        shift, and go to state 66
    '>'        shift, and go to state 67
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    $default  reduce using rule 45 (cargs)


State 99

   40 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT . '>' '(' ')'

    '>'  shift, and go to state 103


State 100

   41 allocator: TOK_ALLOC '<' TOK_ARRAY '<' . plaintype '>' '>' '(' expr ')'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 10

    plaintype  go to state 104


State 101

   39 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' . '(' expr ')'

    '('  shift, and go to state 105


State 102

   47 variable: expr '[' expr ']' .

    $default  reduce using rule 47 (variable)


State 103

   40 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' . '(' ')'

    '('  shift, and go to state 106


State 104

   41 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype . '>' '>' '(' expr ')'

    '>'  shift, and go to state 107


State 105

   39 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 108
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 106

   40 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' . ')'

    ')'  shift, and go to state 109


State 107

   41 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' . '>' '(' expr ')'

    '>'  shift, and go to state 110


State 108

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   39 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr . ')'
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    TOK_EQ     shift, and go to state 61
    TOK_NE     shift, and go to state 62
    TOK_LE     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '<'        shift, and go to state 66
    '>'        shift, and go to state 67
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73
    ')'        shift, and go to state 111


State 109

   40 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')' .

    $default  reduce using rule 40 (allocator)


State 110

   41 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' . '(' expr ')'

    '('  shift, and go to state 112


State 111

   39 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr ')' .

    $default  reduce using rule 39 (allocator)


State 112

   41 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    expr       go to state 113
    allocator  go to state 47
    call       go to state 48
    cargs      go to state 49
    variable   go to state 50
    constant   go to state 51


State 113

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   41 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr . ')'
   47 variable: expr . '[' expr ']'
   48         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 60
    TOK_EQ     shift, and go to state 61
    TOK_NE     shift, and go to state 62
    TOK_LE     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '<'        shift, and go to state 66
    '>'        shift, and go to state 67
    '+'        shift, and go to state 68
    '-'        shift, and go to state 69
    '*'        shift, and go to state 70
    '/'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73
    ')'        shift, and go to state 114


State 114

   41 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')' .

    $default  reduce using rule 41 (allocator)

Terminals unused in grammar

   TOK_LT
   TOK_GT
   TOK_NOT
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_INITDECL
   TOK_TYPE_ID
   TOK_VARDECL
   TOK_INDEX
   TOK_FUNCTION


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program statement
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: sargs '}' ';'
    8          | TOK_STRUCT TOK_IDENT '{' '}' ';'

    9 sargs: sargs type TOK_IDENT ';'
   10      | TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';'

   11 statement: vardecl
   12          | block
   13          | while
   14          | expr ';'
   15          | ifelse
   16          | return
   17          | function

   18 vardecl: type TOK_IDENT '=' expr ';'
   19        | type TOK_IDENT ';'

   20 type: plaintype
   21     | TOK_ARRAY '<' plaintype '>'

   22 plaintype: TOK_INT
   23          | TOK_VOID
   24          | TOK_STRING
   25          | TOK_PTR '<' TOK_STRUCT TOK_IDENT '>'

   26 expr: expr '=' expr
   27     | expr '+' expr
   28     | expr '-' expr
   29     | expr '*' expr
   30     | expr '/' expr
   31     | expr '%' expr
   32     | expr TOK_EQ expr
   33     | expr TOK_NE expr
   34     | expr TOK_LE expr
   35     | expr TOK_GE expr
   36     | expr '<' expr
   37     | expr '>' expr
   38     | '-' expr
   39     | '+' expr
   40     | allocator
   41     | '(' expr ')'
   42     | call
   43     | variable
   44     | constant

   45 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr ')'
   46          | TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   47          | TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

   48 call: cargs ')'
   49     | TOK_IDENT '(' ')'

   50 cargs: TOK_IDENT '(' expr
   51      | cargs ',' expr

   52 variable: TOK_IDENT
   53         | expr '[' expr ']'
   54         | expr TOK_ARROW TOK_IDENT

   55 constant: TOK_INTCON
   56         | TOK_CHARCON
   57         | TOK_STRINGCON
   58         | TOK_NULLPTR

   59 block: bargs '}'
   60      | '{' '}'
   61      | ';'

   62 bargs: '{' statement
   63      | bargs statement

   64 while: TOK_WHILE '(' expr ')' statement

   65 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   66       | TOK_IF '(' expr ')' statement

   67 return: TOK_RETURN expr ';'
   68       | TOK_RETURN ';'

   69 function: fargs ')' block
   70         | type TOK_IDENT '(' ')' block

   71 fargs: type TOK_IDENT '(' type TOK_IDENT
   72      | fargs ',' type TOK_IDENT


Terminals, with rules where they appear

$end (0) 0
'%' (37) 31
'(' (40) 41 45 46 47 49 50 64 65 66 70 71
')' (41) 41 45 46 47 48 49 64 65 66 69 70
'*' (42) 29
'+' (43) 27 39
',' (44) 51 72
'-' (45) 28 38
'/' (47) 30
';' (59) 5 7 8 9 10 14 18 19 61 67 68
'<' (60) 21 25 36 45 46 47
'=' (61) 18 26
'>' (62) 21 25 37 45 46 47
'[' (91) 53
']' (93) 53
'{' (123) 8 10 60 62
'}' (125) 4 7 8 59 60
error (256) 4 5
TOK_VOID (258) 23
TOK_INT (259) 22
TOK_STRING (260) 24
TOK_IF (261) 65 66
TOK_ELSE (262) 65
TOK_WHILE (263) 64
TOK_RETURN (264) 67 68
TOK_STRUCT (265) 8 10 25 46
TOK_NULLPTR (266) 58
TOK_ARRAY (267) 21 47
TOK_ARROW (268) 54
TOK_ALLOC (269) 45 46 47
TOK_PTR (270) 25
TOK_EQ (271) 32
TOK_NE (272) 33
TOK_LT (273)
TOK_LE (274) 34
TOK_GT (275)
TOK_GE (276) 35
TOK_NOT (277)
TOK_IDENT (278) 8 9 10 18 19 25 46 49 50 52 54 70 71 72
TOK_INTCON (279) 55
TOK_CHARCON (280) 56
TOK_STRINGCON (281) 45 57
TOK_ROOT (282)
TOK_BLOCK (283)
TOK_CALL (284)
TOK_INITDECL (285)
TOK_TYPE_ID (286)
TOK_VARDECL (287)
TOK_INDEX (288)
TOK_FUNCTION (289)
U_PLUS (290)
U_MINUS (291)


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
start (54)
    on left: 1, on right: 0
program (55)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
structdef (56)
    on left: 7 8, on right: 2
sargs (57)
    on left: 9 10, on right: 7 9
statement (58)
    on left: 11 12 13 14 15 16 17, on right: 3 62 63 64 65 66
vardecl (59)
    on left: 18 19, on right: 11
type (60)
    on left: 20 21, on right: 9 10 18 19 70 71 72
plaintype (61)
    on left: 22 23 24 25, on right: 20 21 47
expr (62)
    on left: 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
    44, on right: 14 18 26 27 28 29 30 31 32 33 34 35 36 37 38 39 41
    45 47 50 51 53 54 64 65 66 67
allocator (63)
    on left: 45 46 47, on right: 40
call (64)
    on left: 48 49, on right: 42
cargs (65)
    on left: 50 51, on right: 48 51
variable (66)
    on left: 52 53 54, on right: 43
constant (67)
    on left: 55 56 57 58, on right: 44
block (68)
    on left: 59 60 61, on right: 12 69 70
bargs (69)
    on left: 62 63, on right: 59 63
while (70)
    on left: 64, on right: 13
ifelse (71)
    on left: 65 66, on right: 15
return (72)
    on left: 67 68, on right: 16
function (73)
    on left: 69 70, on right: 17
fargs (74)
    on left: 71 72, on right: 69 72


State 0

    0 $accept: . start $end

    $default  reduce using rule 6 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . statement
    4        | program . error '}'
    5        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_STRUCT     shift, and go to state 11
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    $end  reduce using rule 1 (start)

    structdef  go to state 25
    sargs      go to state 26
    statement  go to state 27
    vardecl    go to state 28
    type       go to state 29
    plaintype  go to state 30
    expr       go to state 31
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36
    block      go to state 37
    bargs      go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41
    function   go to state 42
    fargs      go to state 43


State 3

    0 $accept: start $end .

    $default  accept


State 4

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 44
    ';'  shift, and go to state 45


State 5

   23 plaintype: TOK_VOID .

    $default  reduce using rule 23 (plaintype)


State 6

   22 plaintype: TOK_INT .

    $default  reduce using rule 22 (plaintype)


State 7

   24 plaintype: TOK_STRING .

    $default  reduce using rule 24 (plaintype)


State 8

   65 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   66       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 46


State 9

   64 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 47


State 10

   67 return: TOK_RETURN . expr ';'
   68       | TOK_RETURN . ';'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 48

    expr       go to state 49
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 11

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}' ';'
   10 sargs: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 50


State 12

   58 constant: TOK_NULLPTR .

    $default  reduce using rule 58 (constant)


State 13

   21 type: TOK_ARRAY . '<' plaintype '>'

    '<'  shift, and go to state 51


State 14

   45 allocator: TOK_ALLOC . '<' TOK_STRINGCON '>' '(' expr ')'
   46          | TOK_ALLOC . '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   47          | TOK_ALLOC . '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 52


State 15

   25 plaintype: TOK_PTR . '<' TOK_STRUCT TOK_IDENT '>'

    '<'  shift, and go to state 53


State 16

   49 call: TOK_IDENT . '(' ')'
   50 cargs: TOK_IDENT . '(' expr
   52 variable: TOK_IDENT .

    '('  shift, and go to state 54

    $default  reduce using rule 52 (variable)


State 17

   55 constant: TOK_INTCON .

    $default  reduce using rule 55 (constant)


State 18

   56 constant: TOK_CHARCON .

    $default  reduce using rule 56 (constant)


State 19

   57 constant: TOK_STRINGCON .

    $default  reduce using rule 57 (constant)


State 20

   39 expr: '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 55
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 21

   38 expr: '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 56
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 22

   41 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 57
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 23

   61 block: ';' .

    $default  reduce using rule 61 (block)


State 24

   60 block: '{' . '}'
   62 bargs: '{' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    '}'            shift, and go to state 58
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    statement  go to state 59
    vardecl    go to state 28
    type       go to state 29
    plaintype  go to state 30
    expr       go to state 31
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36
    block      go to state 37
    bargs      go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41
    function   go to state 42
    fargs      go to state 43


State 25

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 26

    7 structdef: sargs . '}' ';'
    9 sargs: sargs . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    '}'         shift, and go to state 60

    type       go to state 61
    plaintype  go to state 30


State 27

    3 program: program statement .

    $default  reduce using rule 3 (program)


State 28

   11 statement: vardecl .

    $default  reduce using rule 11 (statement)


State 29

   18 vardecl: type . TOK_IDENT '=' expr ';'
   19        | type . TOK_IDENT ';'
   70 function: type . TOK_IDENT '(' ')' block
   71 fargs: type . TOK_IDENT '(' type TOK_IDENT

    TOK_IDENT  shift, and go to state 62


State 30

   20 type: plaintype .

    $default  reduce using rule 20 (type)


State 31

   14 statement: expr . ';'
   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ';'        shift, and go to state 77


State 32

   40 expr: allocator .

    $default  reduce using rule 40 (expr)


State 33

   42 expr: call .

    $default  reduce using rule 42 (expr)


State 34

   48 call: cargs . ')'
   51 cargs: cargs . ',' expr

    ')'  shift, and go to state 78
    ','  shift, and go to state 79


State 35

   43 expr: variable .

    $default  reduce using rule 43 (expr)


State 36

   44 expr: constant .

    $default  reduce using rule 44 (expr)


State 37

   12 statement: block .

    $default  reduce using rule 12 (statement)


State 38

   59 block: bargs . '}'
   63 bargs: bargs . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    '}'            shift, and go to state 80
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    statement  go to state 81
    vardecl    go to state 28
    type       go to state 29
    plaintype  go to state 30
    expr       go to state 31
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36
    block      go to state 37
    bargs      go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41
    function   go to state 42
    fargs      go to state 43


State 39

   13 statement: while .

    $default  reduce using rule 13 (statement)


State 40

   15 statement: ifelse .

    $default  reduce using rule 15 (statement)


State 41

   16 statement: return .

    $default  reduce using rule 16 (statement)


State 42

   17 statement: function .

    $default  reduce using rule 17 (statement)


State 43

   69 function: fargs . ')' block
   72 fargs: fargs . ',' type TOK_IDENT

    ')'  shift, and go to state 82
    ','  shift, and go to state 83


State 44

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 45

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 46

   65 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   66       | TOK_IF '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 84
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 47

   64 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 85
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 48

   68 return: TOK_RETURN ';' .

    $default  reduce using rule 68 (return)


State 49

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT
   67 return: TOK_RETURN expr . ';'

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ';'        shift, and go to state 86


State 50

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT ';'

    '{'  shift, and go to state 87


State 51

   21 type: TOK_ARRAY '<' . plaintype '>'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 15

    plaintype  go to state 88


State 52

   45 allocator: TOK_ALLOC '<' . TOK_STRINGCON '>' '(' expr ')'
   46          | TOK_ALLOC '<' . TOK_STRUCT TOK_IDENT '>' '(' ')'
   47          | TOK_ALLOC '<' . TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    TOK_STRUCT     shift, and go to state 89
    TOK_ARRAY      shift, and go to state 90
    TOK_STRINGCON  shift, and go to state 91


State 53

   25 plaintype: TOK_PTR '<' . TOK_STRUCT TOK_IDENT '>'

    TOK_STRUCT  shift, and go to state 92


State 54

   49 call: TOK_IDENT '(' . ')'
   50 cargs: TOK_IDENT '(' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ')'            shift, and go to state 93

    expr       go to state 94
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 55

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   39     | '+' expr .
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '['        shift, and go to state 76

    $default  reduce using rule 39 (expr)


State 56

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   38     | '-' expr .
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '['        shift, and go to state 76

    $default  reduce using rule 38 (expr)


State 57

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   41     | '(' expr . ')'
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ')'        shift, and go to state 95


State 58

   60 block: '{' '}' .

    $default  reduce using rule 60 (block)


State 59

   62 bargs: '{' statement .

    $default  reduce using rule 62 (bargs)


State 60

    7 structdef: sargs '}' . ';'

    ';'  shift, and go to state 96


State 61

    9 sargs: sargs type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 97


State 62

   18 vardecl: type TOK_IDENT . '=' expr ';'
   19        | type TOK_IDENT . ';'
   70 function: type TOK_IDENT . '(' ')' block
   71 fargs: type TOK_IDENT . '(' type TOK_IDENT

    '='  shift, and go to state 98
    '('  shift, and go to state 99
    ';'  shift, and go to state 100


State 63

   54 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 101


State 64

   32 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 102
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 65

   33 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 103
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 66

   34 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 104
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 67

   35 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 105
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 68

   26 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 106
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 69

   36 expr: expr '<' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 107
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 70

   37 expr: expr '>' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 108
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 71

   27 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 109
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 72

   28 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 110
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 73

   29 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 111
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 74

   30 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 112
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 75

   31 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 113
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 76

   53 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 114
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 77

   14 statement: expr ';' .

    $default  reduce using rule 14 (statement)


State 78

   48 call: cargs ')' .

    $default  reduce using rule 48 (call)


State 79

   51 cargs: cargs ',' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 115
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 80

   59 block: bargs '}' .

    $default  reduce using rule 59 (block)


State 81

   63 bargs: bargs statement .

    $default  reduce using rule 63 (bargs)


State 82

   69 function: fargs ')' . block

    ';'  shift, and go to state 23
    '{'  shift, and go to state 24

    block  go to state 116
    bargs  go to state 38


State 83

   72 fargs: fargs ',' . type TOK_IDENT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15

    type       go to state 117
    plaintype  go to state 30


State 84

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT
   65 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   66       | TOK_IF '(' expr . ')' statement

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ')'        shift, and go to state 118


State 85

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT
   64 while: TOK_WHILE '(' expr . ')' statement

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ')'        shift, and go to state 119


State 86

   67 return: TOK_RETURN expr ';' .

    $default  reduce using rule 67 (return)


State 87

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    '}'         shift, and go to state 120

    type       go to state 121
    plaintype  go to state 30


State 88

   21 type: TOK_ARRAY '<' plaintype . '>'

    '>'  shift, and go to state 122


State 89

   46 allocator: TOK_ALLOC '<' TOK_STRUCT . TOK_IDENT '>' '(' ')'

    TOK_IDENT  shift, and go to state 123


State 90

   47 allocator: TOK_ALLOC '<' TOK_ARRAY . '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 124


State 91

   45 allocator: TOK_ALLOC '<' TOK_STRINGCON . '>' '(' expr ')'

    '>'  shift, and go to state 125


State 92

   25 plaintype: TOK_PTR '<' TOK_STRUCT . TOK_IDENT '>'

    TOK_IDENT  shift, and go to state 126


State 93

   49 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 49 (call)


State 94

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   50 cargs: TOK_IDENT '(' expr .
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 50 (cargs)


State 95

   41 expr: '(' expr ')' .

    $default  reduce using rule 41 (expr)


State 96

    7 structdef: sargs '}' ';' .

    $default  reduce using rule 7 (structdef)


State 97

    9 sargs: sargs type TOK_IDENT . ';'

    ';'  shift, and go to state 127


State 98

   18 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 128
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 99

   70 function: type TOK_IDENT '(' . ')' block
   71 fargs: type TOK_IDENT '(' . type TOK_IDENT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    ')'         shift, and go to state 129

    type       go to state 130
    plaintype  go to state 30


State 100

   19 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 19 (vardecl)


State 101

   54 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 54 (variable)


State 102

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   32     | expr TOK_EQ expr .
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 32 (expr)


State 103

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   33     | expr TOK_NE expr .
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 33 (expr)


State 104

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   34     | expr TOK_LE expr .
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 34 (expr)


State 105

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   35     | expr TOK_GE expr .
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 35 (expr)


State 106

   26 expr: expr . '=' expr
   26     | expr '=' expr .
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 26 (expr)


State 107

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   36     | expr '<' expr .
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 36 (expr)


State 108

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   37     | expr '>' expr .
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 37 (expr)


State 109

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   27     | expr '+' expr .
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 27 (expr)


State 110

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   28     | expr '-' expr .
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 28 (expr)


State 111

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   29     | expr '*' expr .
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '['        shift, and go to state 76

    $default  reduce using rule 29 (expr)


State 112

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   30     | expr '/' expr .
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '['        shift, and go to state 76

    $default  reduce using rule 30 (expr)


State 113

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   31     | expr '%' expr .
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    '['        shift, and go to state 76

    $default  reduce using rule 31 (expr)


State 114

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   53         | expr '[' expr . ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ']'        shift, and go to state 131


State 115

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   51 cargs: cargs ',' expr .
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 51 (cargs)


State 116

   69 function: fargs ')' block .

    $default  reduce using rule 69 (function)


State 117

   72 fargs: fargs ',' type . TOK_IDENT

    TOK_IDENT  shift, and go to state 132


State 118

   65 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   66       | TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    statement  go to state 133
    vardecl    go to state 28
    type       go to state 29
    plaintype  go to state 30
    expr       go to state 31
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36
    block      go to state 37
    bargs      go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41
    function   go to state 42
    fargs      go to state 43


State 119

   64 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    statement  go to state 134
    vardecl    go to state 28
    type       go to state 29
    plaintype  go to state 30
    expr       go to state 31
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36
    block      go to state 37
    bargs      go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41
    function   go to state 42
    fargs      go to state 43


State 120

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' . ';'

    ';'  shift, and go to state 135


State 121

   10 sargs: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 136


State 122

   21 type: TOK_ARRAY '<' plaintype '>' .

    $default  reduce using rule 21 (type)


State 123

   46 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT . '>' '(' ')'

    '>'  shift, and go to state 137


State 124

   47 allocator: TOK_ALLOC '<' TOK_ARRAY '<' . plaintype '>' '>' '(' expr ')'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 15

    plaintype  go to state 138


State 125

   45 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' . '(' expr ')'

    '('  shift, and go to state 139


State 126

   25 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT . '>'

    '>'  shift, and go to state 140


State 127

    9 sargs: sargs type TOK_IDENT ';' .

    $default  reduce using rule 9 (sargs)


State 128

   18 vardecl: type TOK_IDENT '=' expr . ';'
   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ';'        shift, and go to state 141


State 129

   70 function: type TOK_IDENT '(' ')' . block

    ';'  shift, and go to state 23
    '{'  shift, and go to state 24

    block  go to state 142
    bargs  go to state 38


State 130

   71 fargs: type TOK_IDENT '(' type . TOK_IDENT

    TOK_IDENT  shift, and go to state 143


State 131

   53 variable: expr '[' expr ']' .

    $default  reduce using rule 53 (variable)


State 132

   72 fargs: fargs ',' type TOK_IDENT .

    $default  reduce using rule 72 (fargs)


State 133

   65 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   66       | TOK_IF '(' expr ')' statement .

    TOK_ELSE  shift, and go to state 144

    $default  reduce using rule 66 (ifelse)


State 134

   64 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 64 (while)


State 135

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' ';' .

    $default  reduce using rule 8 (structdef)


State 136

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . ';'

    ';'  shift, and go to state 145


State 137

   46 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' . '(' ')'

    '('  shift, and go to state 146


State 138

   47 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype . '>' '>' '(' expr ')'

    '>'  shift, and go to state 147


State 139

   45 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 148
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 140

   25 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT '>' .

    $default  reduce using rule 25 (plaintype)


State 141

   18 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 18 (vardecl)


State 142

   70 function: type TOK_IDENT '(' ')' block .

    $default  reduce using rule 70 (function)


State 143

   71 fargs: type TOK_IDENT '(' type TOK_IDENT .

    $default  reduce using rule 71 (fargs)


State 144

   65 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    statement  go to state 149
    vardecl    go to state 28
    type       go to state 29
    plaintype  go to state 30
    expr       go to state 31
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36
    block      go to state 37
    bargs      go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41
    function   go to state 42
    fargs      go to state 43


State 145

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' .

    $default  reduce using rule 10 (sargs)


State 146

   46 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' . ')'

    ')'  shift, and go to state 150


State 147

   47 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' . '>' '(' expr ')'

    '>'  shift, and go to state 151


State 148

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   45 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr . ')'
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ')'        shift, and go to state 152


State 149

   65 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 65 (ifelse)


State 150

   46 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')' .

    $default  reduce using rule 46 (allocator)


State 151

   47 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' . '(' expr ')'

    '('  shift, and go to state 153


State 152

   45 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr ')' .

    $default  reduce using rule 45 (allocator)


State 153

   47 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 154
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 154

   26 expr: expr . '=' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | expr . '*' expr
   30     | expr . '/' expr
   31     | expr . '%' expr
   32     | expr . TOK_EQ expr
   33     | expr . TOK_NE expr
   34     | expr . TOK_LE expr
   35     | expr . TOK_GE expr
   36     | expr . '<' expr
   37     | expr . '>' expr
   47 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr . ')'
   53 variable: expr . '[' expr ']'
   54         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 63
    TOK_EQ     shift, and go to state 64
    TOK_NE     shift, and go to state 65
    TOK_LE     shift, and go to state 66
    TOK_GE     shift, and go to state 67
    '='        shift, and go to state 68
    '<'        shift, and go to state 69
    '>'        shift, and go to state 70
    '+'        shift, and go to state 71
    '-'        shift, and go to state 72
    '*'        shift, and go to state 73
    '/'        shift, and go to state 74
    '%'        shift, and go to state 75
    '['        shift, and go to state 76
    ')'        shift, and go to state 155


State 155

   47 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')' .

    $default  reduce using rule 47 (allocator)

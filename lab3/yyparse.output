Terminals unused in grammar

   TOK_IF
   TOK_ELSE
   TOK_WHILE
   TOK_RETURN
   TOK_ALLOC
   TOK_LT
   TOK_GT
   TOK_NOT
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_INITDECL
   TOK_TYPE_ID
   TOK_VARDECL
   U_PLUS
   U_MINUS
   '('


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program statement
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: sargs '}' ';'
    8          | TOK_STRUCT TOK_IDENT '{' '}' ';'

    9 sargs: sargs type TOK_IDENT ';'
   10      | TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';'

   11 type: plaintype
   12     | TOK_ARRAY '<' plaintype '>'

   13 plaintype: TOK_INT
   14          | TOK_VOID
   15          | TOK_STRING
   16          | TOK_PTR '<' TOK_STRUCT TOK_IDENT '>'

   17 statement: vardecl

   18 vardecl: type TOK_IDENT '=' expr ';'
   19        | type TOK_IDENT ';'

   20 expr: expr '=' expr
   21     | expr '+' expr
   22     | expr '-' expr
   23     | expr '*' expr
   24     | expr '/' expr
   25     | expr '%' expr
   26     | expr TOK_EQ expr
   27     | expr TOK_NE expr
   28     | expr TOK_LE expr
   29     | expr TOK_GE expr
   30     | expr '<' expr
   31     | expr '>' expr
   32     | constant
   33     | variable

   34 constant: TOK_INTCON
   35         | TOK_CHARCON
   36         | TOK_STRINGCON
   37         | TOK_NULLPTR

   38 variable: TOK_IDENT
   39         | expr '[' expr ']'
   40         | expr TOK_ARROW TOK_IDENT


Terminals, with rules where they appear

$end (0) 0
'%' (37) 25
'(' (40)
'*' (42) 23
'+' (43) 21
'-' (45) 22
'/' (47) 24
';' (59) 5 7 8 9 10 18 19
'<' (60) 12 16 30
'=' (61) 18 20
'>' (62) 12 16 31
'[' (91) 39
']' (93) 39
'{' (123) 8 10
'}' (125) 4 7 8
error (256) 4 5
TOK_VOID (258) 14
TOK_INT (259) 13
TOK_STRING (260) 15
TOK_IF (261)
TOK_ELSE (262)
TOK_WHILE (263)
TOK_RETURN (264)
TOK_STRUCT (265) 8 10 16
TOK_NULLPTR (266) 37
TOK_ARRAY (267) 12
TOK_ARROW (268) 40
TOK_ALLOC (269)
TOK_PTR (270) 16
TOK_EQ (271) 26
TOK_NE (272) 27
TOK_LT (273)
TOK_LE (274) 28
TOK_GT (275)
TOK_GE (276) 29
TOK_NOT (277)
TOK_IDENT (278) 8 9 10 16 18 19 38 40
TOK_INTCON (279) 34
TOK_CHARCON (280) 35
TOK_STRINGCON (281) 36
TOK_ROOT (282)
TOK_BLOCK (283)
TOK_CALL (284)
TOK_INITDECL (285)
TOK_TYPE_ID (286)
TOK_VARDECL (287)
U_PLUS (288)
U_MINUS (289)


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
start (50)
    on left: 1, on right: 0
program (51)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
structdef (52)
    on left: 7 8, on right: 2
sargs (53)
    on left: 9 10, on right: 7 9
type (54)
    on left: 11 12, on right: 9 10 18 19
plaintype (55)
    on left: 13 14 15 16, on right: 11 12
statement (56)
    on left: 17, on right: 3
vardecl (57)
    on left: 18 19, on right: 17
expr (58)
    on left: 20 21 22 23 24 25 26 27 28 29 30 31 32 33, on right: 18
    20 21 22 23 24 25 26 27 28 29 30 31 39 40
constant (59)
    on left: 34 35 36 37, on right: 32
variable (60)
    on left: 38 39 40, on right: 33


State 0

    0 $accept: . start $end

    $default  reduce using rule 6 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . statement
    4        | program . error '}'
    5        | program . error ';'

    error       shift, and go to state 4
    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_STRUCT  shift, and go to state 8
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10

    $end  reduce using rule 1 (start)

    structdef  go to state 11
    sargs      go to state 12
    type       go to state 13
    plaintype  go to state 14
    statement  go to state 15
    vardecl    go to state 16


State 3

    0 $accept: start $end .

    $default  accept


State 4

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 17
    ';'  shift, and go to state 18


State 5

   14 plaintype: TOK_VOID .

    $default  reduce using rule 14 (plaintype)


State 6

   13 plaintype: TOK_INT .

    $default  reduce using rule 13 (plaintype)


State 7

   15 plaintype: TOK_STRING .

    $default  reduce using rule 15 (plaintype)


State 8

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}' ';'
   10 sargs: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 19


State 9

   12 type: TOK_ARRAY . '<' plaintype '>'

    '<'  shift, and go to state 20


State 10

   16 plaintype: TOK_PTR . '<' TOK_STRUCT TOK_IDENT '>'

    '<'  shift, and go to state 21


State 11

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 12

    7 structdef: sargs . '}' ';'
    9 sargs: sargs . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10
    '}'         shift, and go to state 22

    type       go to state 23
    plaintype  go to state 14


State 13

   18 vardecl: type . TOK_IDENT '=' expr ';'
   19        | type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 24


State 14

   11 type: plaintype .

    $default  reduce using rule 11 (type)


State 15

    3 program: program statement .

    $default  reduce using rule 3 (program)


State 16

   17 statement: vardecl .

    $default  reduce using rule 17 (statement)


State 17

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 18

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 19

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT ';'

    '{'  shift, and go to state 25


State 20

   12 type: TOK_ARRAY '<' . plaintype '>'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 10

    plaintype  go to state 26


State 21

   16 plaintype: TOK_PTR '<' . TOK_STRUCT TOK_IDENT '>'

    TOK_STRUCT  shift, and go to state 27


State 22

    7 structdef: sargs '}' . ';'

    ';'  shift, and go to state 28


State 23

    9 sargs: sargs type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 29


State 24

   18 vardecl: type TOK_IDENT . '=' expr ';'
   19        | type TOK_IDENT . ';'

    '='  shift, and go to state 30
    ';'  shift, and go to state 31


State 25

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10
    '}'         shift, and go to state 32

    type       go to state 33
    plaintype  go to state 14


State 26

   12 type: TOK_ARRAY '<' plaintype . '>'

    '>'  shift, and go to state 34


State 27

   16 plaintype: TOK_PTR '<' TOK_STRUCT . TOK_IDENT '>'

    TOK_IDENT  shift, and go to state 35


State 28

    7 structdef: sargs '}' ';' .

    $default  reduce using rule 7 (structdef)


State 29

    9 sargs: sargs type TOK_IDENT . ';'

    ';'  shift, and go to state 36


State 30

   18 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 42
    constant  go to state 43
    variable  go to state 44


State 31

   19 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 19 (vardecl)


State 32

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' . ';'

    ';'  shift, and go to state 45


State 33

   10 sargs: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 46


State 34

   12 type: TOK_ARRAY '<' plaintype '>' .

    $default  reduce using rule 12 (type)


State 35

   16 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT . '>'

    '>'  shift, and go to state 47


State 36

    9 sargs: sargs type TOK_IDENT ';' .

    $default  reduce using rule 9 (sargs)


State 37

   37 constant: TOK_NULLPTR .

    $default  reduce using rule 37 (constant)


State 38

   38 variable: TOK_IDENT .

    $default  reduce using rule 38 (variable)


State 39

   34 constant: TOK_INTCON .

    $default  reduce using rule 34 (constant)


State 40

   35 constant: TOK_CHARCON .

    $default  reduce using rule 35 (constant)


State 41

   36 constant: TOK_STRINGCON .

    $default  reduce using rule 36 (constant)


State 42

   18 vardecl: type TOK_IDENT '=' expr . ';'
   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   39 variable: expr . '[' expr ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    TOK_EQ     shift, and go to state 49
    TOK_NE     shift, and go to state 50
    TOK_LE     shift, and go to state 51
    TOK_GE     shift, and go to state 52
    '='        shift, and go to state 53
    '<'        shift, and go to state 54
    '>'        shift, and go to state 55
    '+'        shift, and go to state 56
    '-'        shift, and go to state 57
    '*'        shift, and go to state 58
    '/'        shift, and go to state 59
    '%'        shift, and go to state 60
    '['        shift, and go to state 61
    ';'        shift, and go to state 62


State 43

   32 expr: constant .

    $default  reduce using rule 32 (expr)


State 44

   33 expr: variable .

    $default  reduce using rule 33 (expr)


State 45

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' ';' .

    $default  reduce using rule 8 (structdef)


State 46

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . ';'

    ';'  shift, and go to state 63


State 47

   16 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT '>' .

    $default  reduce using rule 16 (plaintype)


State 48

   40 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 64


State 49

   26 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 65
    constant  go to state 43
    variable  go to state 44


State 50

   27 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 66
    constant  go to state 43
    variable  go to state 44


State 51

   28 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 67
    constant  go to state 43
    variable  go to state 44


State 52

   29 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 68
    constant  go to state 43
    variable  go to state 44


State 53

   20 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 69
    constant  go to state 43
    variable  go to state 44


State 54

   30 expr: expr '<' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 70
    constant  go to state 43
    variable  go to state 44


State 55

   31 expr: expr '>' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 71
    constant  go to state 43
    variable  go to state 44


State 56

   21 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 72
    constant  go to state 43
    variable  go to state 44


State 57

   22 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 73
    constant  go to state 43
    variable  go to state 44


State 58

   23 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 74
    constant  go to state 43
    variable  go to state 44


State 59

   24 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 75
    constant  go to state 43
    variable  go to state 44


State 60

   25 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 76
    constant  go to state 43
    variable  go to state 44


State 61

   39 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 37
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 39
    TOK_CHARCON    shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41

    expr      go to state 77
    constant  go to state 43
    variable  go to state 44


State 62

   18 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 18 (vardecl)


State 63

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' .

    $default  reduce using rule 10 (sargs)


State 64

   40 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 40 (variable)


State 65

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   26     | expr TOK_EQ expr .
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   39 variable: expr . '[' expr ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '+'        shift, and go to state 56
    '-'        shift, and go to state 57
    '*'        shift, and go to state 58
    '/'        shift, and go to state 59
    '%'        shift, and go to state 60
    '['        shift, and go to state 61

    $default  reduce using rule 26 (expr)


State 66

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   27     | expr TOK_NE expr .
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   39 variable: expr . '[' expr ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '+'        shift, and go to state 56
    '-'        shift, and go to state 57
    '*'        shift, and go to state 58
    '/'        shift, and go to state 59
    '%'        shift, and go to state 60
    '['        shift, and go to state 61

    $default  reduce using rule 27 (expr)


State 67

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   28     | expr TOK_LE expr .
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   39 variable: expr . '[' expr ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '+'        shift, and go to state 56
    '-'        shift, and go to state 57
    '*'        shift, and go to state 58
    '/'        shift, and go to state 59
    '%'        shift, and go to state 60
    '['        shift, and go to state 61

    $default  reduce using rule 28 (expr)


State 68

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   29     | expr TOK_GE expr .
   30     | expr . '<' expr
   31     | expr . '>' expr
   39 variable: expr . '[' expr ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '+'        shift, and go to state 56
    '-'        shift, and go to state 57
    '*'        shift, and go to state 58
    '/'        shift, and go to state 59
    '%'        shift, and go to state 60
    '['        shift, and go to state 61

    $default  reduce using rule 29 (expr)


State 69

   20 expr: expr . '=' expr
   20     | expr '=' expr .
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   39 variable: expr . '[' expr ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    TOK_EQ     shift, and go to state 49
    TOK_NE     shift, and go to state 50
    TOK_LE     shift, and go to state 51
    TOK_GE     shift, and go to state 52
    '='        shift, and go to state 53
    '<'        shift, and go to state 54
    '>'        shift, and go to state 55
    '+'        shift, and go to state 56
    '-'        shift, and go to state 57
    '*'        shift, and go to state 58
    '/'        shift, and go to state 59
    '%'        shift, and go to state 60
    '['        shift, and go to state 61

    $default  reduce using rule 20 (expr)


State 70

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   30     | expr '<' expr .
   31     | expr . '>' expr
   39 variable: expr . '[' expr ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '+'        shift, and go to state 56
    '-'        shift, and go to state 57
    '*'        shift, and go to state 58
    '/'        shift, and go to state 59
    '%'        shift, and go to state 60
    '['        shift, and go to state 61

    $default  reduce using rule 30 (expr)


State 71

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   31     | expr '>' expr .
   39 variable: expr . '[' expr ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '+'        shift, and go to state 56
    '-'        shift, and go to state 57
    '*'        shift, and go to state 58
    '/'        shift, and go to state 59
    '%'        shift, and go to state 60
    '['        shift, and go to state 61

    $default  reduce using rule 31 (expr)


State 72

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   21     | expr '+' expr .
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   39 variable: expr . '[' expr ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '*'        shift, and go to state 58
    '/'        shift, and go to state 59
    '%'        shift, and go to state 60
    '['        shift, and go to state 61

    $default  reduce using rule 21 (expr)


State 73

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   22     | expr '-' expr .
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   39 variable: expr . '[' expr ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '*'        shift, and go to state 58
    '/'        shift, and go to state 59
    '%'        shift, and go to state 60
    '['        shift, and go to state 61

    $default  reduce using rule 22 (expr)


State 74

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   23     | expr '*' expr .
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   39 variable: expr . '[' expr ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '['        shift, and go to state 61

    $default  reduce using rule 23 (expr)


State 75

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   24     | expr '/' expr .
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   39 variable: expr . '[' expr ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '['        shift, and go to state 61

    $default  reduce using rule 24 (expr)


State 76

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   25     | expr '%' expr .
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   39 variable: expr . '[' expr ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '['        shift, and go to state 61

    $default  reduce using rule 25 (expr)


State 77

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   39 variable: expr . '[' expr ']'
   39         | expr '[' expr . ']'
   40         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    TOK_EQ     shift, and go to state 49
    TOK_NE     shift, and go to state 50
    TOK_LE     shift, and go to state 51
    TOK_GE     shift, and go to state 52
    '='        shift, and go to state 53
    '<'        shift, and go to state 54
    '>'        shift, and go to state 55
    '+'        shift, and go to state 56
    '-'        shift, and go to state 57
    '*'        shift, and go to state 58
    '/'        shift, and go to state 59
    '%'        shift, and go to state 60
    '['        shift, and go to state 61
    ']'        shift, and go to state 78


State 78

   39 variable: expr '[' expr ']' .

    $default  reduce using rule 39 (variable)

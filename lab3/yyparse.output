Terminals unused in grammar

   TOK_IF
   TOK_ELSE
   TOK_WHILE
   TOK_RETURN
   TOK_LT
   TOK_GT
   TOK_NOT
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_INITDECL
   TOK_TYPE_ID
   TOK_VARDECL
   TOK_INDEX


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program statement
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: sargs '}' ';'
    8          | TOK_STRUCT TOK_IDENT '{' '}' ';'

    9 sargs: sargs type TOK_IDENT ';'
   10      | TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';'

   11 type: plaintype
   12     | TOK_ARRAY '<' plaintype '>'

   13 plaintype: TOK_INT
   14          | TOK_VOID
   15          | TOK_STRING
   16          | TOK_PTR '<' TOK_STRUCT TOK_IDENT '>'

   17 statement: vardecl

   18 vardecl: type TOK_IDENT '=' expr ';'
   19        | type TOK_IDENT ';'

   20 expr: expr '=' expr
   21     | expr '+' expr
   22     | expr '-' expr
   23     | expr '*' expr
   24     | expr '/' expr
   25     | expr '%' expr
   26     | expr TOK_EQ expr
   27     | expr TOK_NE expr
   28     | expr TOK_LE expr
   29     | expr TOK_GE expr
   30     | expr '<' expr
   31     | expr '>' expr
   32     | '-' expr
   33     | '+' expr
   34     | allocator
   35     | constant
   36     | variable

   37 constant: TOK_INTCON
   38         | TOK_CHARCON
   39         | TOK_STRINGCON
   40         | TOK_NULLPTR

   41 variable: TOK_IDENT
   42         | expr '[' expr ']'
   43         | expr TOK_ARROW TOK_IDENT

   44 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr ')'
   45          | TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   46          | TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'


Terminals, with rules where they appear

$end (0) 0
'%' (37) 25
'(' (40) 44 45 46
')' (41) 44 45 46
'*' (42) 23
'+' (43) 21 33
'-' (45) 22 32
'/' (47) 24
';' (59) 5 7 8 9 10 18 19
'<' (60) 12 16 30 44 45 46
'=' (61) 18 20
'>' (62) 12 16 31 44 45 46
'[' (91) 42
']' (93) 42
'{' (123) 8 10
'}' (125) 4 7 8
error (256) 4 5
TOK_VOID (258) 14
TOK_INT (259) 13
TOK_STRING (260) 15
TOK_IF (261)
TOK_ELSE (262)
TOK_WHILE (263)
TOK_RETURN (264)
TOK_STRUCT (265) 8 10 16 45
TOK_NULLPTR (266) 40
TOK_ARRAY (267) 12 46
TOK_ARROW (268) 43
TOK_ALLOC (269) 44 45 46
TOK_PTR (270) 16
TOK_EQ (271) 26
TOK_NE (272) 27
TOK_LT (273)
TOK_LE (274) 28
TOK_GT (275)
TOK_GE (276) 29
TOK_NOT (277)
TOK_IDENT (278) 8 9 10 16 18 19 41 43 45
TOK_INTCON (279) 37
TOK_CHARCON (280) 38
TOK_STRINGCON (281) 39 44
TOK_ROOT (282)
TOK_BLOCK (283)
TOK_CALL (284)
TOK_INITDECL (285)
TOK_TYPE_ID (286)
TOK_VARDECL (287)
TOK_INDEX (288)
U_PLUS (289)
U_MINUS (290)


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
start (52)
    on left: 1, on right: 0
program (53)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
structdef (54)
    on left: 7 8, on right: 2
sargs (55)
    on left: 9 10, on right: 7 9
type (56)
    on left: 11 12, on right: 9 10 18 19
plaintype (57)
    on left: 13 14 15 16, on right: 11 12 46
statement (58)
    on left: 17, on right: 3
vardecl (59)
    on left: 18 19, on right: 17
expr (60)
    on left: 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36, on right:
    18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 42 43 44 46
constant (61)
    on left: 37 38 39 40, on right: 35
variable (62)
    on left: 41 42 43, on right: 36
allocator (63)
    on left: 44 45 46, on right: 34


State 0

    0 $accept: . start $end

    $default  reduce using rule 6 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . statement
    4        | program . error '}'
    5        | program . error ';'

    error       shift, and go to state 4
    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_STRUCT  shift, and go to state 8
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10

    $end  reduce using rule 1 (start)

    structdef  go to state 11
    sargs      go to state 12
    type       go to state 13
    plaintype  go to state 14
    statement  go to state 15
    vardecl    go to state 16


State 3

    0 $accept: start $end .

    $default  accept


State 4

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 17
    ';'  shift, and go to state 18


State 5

   14 plaintype: TOK_VOID .

    $default  reduce using rule 14 (plaintype)


State 6

   13 plaintype: TOK_INT .

    $default  reduce using rule 13 (plaintype)


State 7

   15 plaintype: TOK_STRING .

    $default  reduce using rule 15 (plaintype)


State 8

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}' ';'
   10 sargs: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 19


State 9

   12 type: TOK_ARRAY . '<' plaintype '>'

    '<'  shift, and go to state 20


State 10

   16 plaintype: TOK_PTR . '<' TOK_STRUCT TOK_IDENT '>'

    '<'  shift, and go to state 21


State 11

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 12

    7 structdef: sargs . '}' ';'
    9 sargs: sargs . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10
    '}'         shift, and go to state 22

    type       go to state 23
    plaintype  go to state 14


State 13

   18 vardecl: type . TOK_IDENT '=' expr ';'
   19        | type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 24


State 14

   11 type: plaintype .

    $default  reduce using rule 11 (type)


State 15

    3 program: program statement .

    $default  reduce using rule 3 (program)


State 16

   17 statement: vardecl .

    $default  reduce using rule 17 (statement)


State 17

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 18

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 19

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT ';'

    '{'  shift, and go to state 25


State 20

   12 type: TOK_ARRAY '<' . plaintype '>'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 10

    plaintype  go to state 26


State 21

   16 plaintype: TOK_PTR '<' . TOK_STRUCT TOK_IDENT '>'

    TOK_STRUCT  shift, and go to state 27


State 22

    7 structdef: sargs '}' . ';'

    ';'  shift, and go to state 28


State 23

    9 sargs: sargs type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 29


State 24

   18 vardecl: type TOK_IDENT . '=' expr ';'
   19        | type TOK_IDENT . ';'

    '='  shift, and go to state 30
    ';'  shift, and go to state 31


State 25

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10
    '}'         shift, and go to state 32

    type       go to state 33
    plaintype  go to state 14


State 26

   12 type: TOK_ARRAY '<' plaintype . '>'

    '>'  shift, and go to state 34


State 27

   16 plaintype: TOK_PTR '<' TOK_STRUCT . TOK_IDENT '>'

    TOK_IDENT  shift, and go to state 35


State 28

    7 structdef: sargs '}' ';' .

    $default  reduce using rule 7 (structdef)


State 29

    9 sargs: sargs type TOK_IDENT . ';'

    ';'  shift, and go to state 36


State 30

   18 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 45
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 31

   19 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 19 (vardecl)


State 32

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' . ';'

    ';'  shift, and go to state 49


State 33

   10 sargs: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 50


State 34

   12 type: TOK_ARRAY '<' plaintype '>' .

    $default  reduce using rule 12 (type)


State 35

   16 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT . '>'

    '>'  shift, and go to state 51


State 36

    9 sargs: sargs type TOK_IDENT ';' .

    $default  reduce using rule 9 (sargs)


State 37

   40 constant: TOK_NULLPTR .

    $default  reduce using rule 40 (constant)


State 38

   44 allocator: TOK_ALLOC . '<' TOK_STRINGCON '>' '(' expr ')'
   45          | TOK_ALLOC . '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   46          | TOK_ALLOC . '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 52


State 39

   41 variable: TOK_IDENT .

    $default  reduce using rule 41 (variable)


State 40

   37 constant: TOK_INTCON .

    $default  reduce using rule 37 (constant)


State 41

   38 constant: TOK_CHARCON .

    $default  reduce using rule 38 (constant)


State 42

   39 constant: TOK_STRINGCON .

    $default  reduce using rule 39 (constant)


State 43

   33 expr: '+' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 53
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 44

   32 expr: '-' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 54
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 45

   18 vardecl: type TOK_IDENT '=' expr . ';'
   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    TOK_EQ     shift, and go to state 56
    TOK_NE     shift, and go to state 57
    TOK_LE     shift, and go to state 58
    TOK_GE     shift, and go to state 59
    '='        shift, and go to state 60
    '<'        shift, and go to state 61
    '>'        shift, and go to state 62
    '+'        shift, and go to state 63
    '-'        shift, and go to state 64
    '*'        shift, and go to state 65
    '/'        shift, and go to state 66
    '%'        shift, and go to state 67
    '['        shift, and go to state 68
    ';'        shift, and go to state 69


State 46

   35 expr: constant .

    $default  reduce using rule 35 (expr)


State 47

   36 expr: variable .

    $default  reduce using rule 36 (expr)


State 48

   34 expr: allocator .

    $default  reduce using rule 34 (expr)


State 49

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' ';' .

    $default  reduce using rule 8 (structdef)


State 50

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . ';'

    ';'  shift, and go to state 70


State 51

   16 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT '>' .

    $default  reduce using rule 16 (plaintype)


State 52

   44 allocator: TOK_ALLOC '<' . TOK_STRINGCON '>' '(' expr ')'
   45          | TOK_ALLOC '<' . TOK_STRUCT TOK_IDENT '>' '(' ')'
   46          | TOK_ALLOC '<' . TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    TOK_STRUCT     shift, and go to state 71
    TOK_ARRAY      shift, and go to state 72
    TOK_STRINGCON  shift, and go to state 73


State 53

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   33     | '+' expr .
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    '['        shift, and go to state 68

    $default  reduce using rule 33 (expr)


State 54

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | '-' expr .
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    '['        shift, and go to state 68

    $default  reduce using rule 32 (expr)


State 55

   43 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 74


State 56

   26 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 75
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 57

   27 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 76
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 58

   28 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 77
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 59

   29 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 78
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 60

   20 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 79
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 61

   30 expr: expr '<' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 80
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 62

   31 expr: expr '>' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 81
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 63

   21 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 82
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 64

   22 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 83
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 65

   23 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 84
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 66

   24 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 85
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 67

   25 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 86
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 68

   42 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 87
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 69

   18 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 18 (vardecl)


State 70

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' .

    $default  reduce using rule 10 (sargs)


State 71

   45 allocator: TOK_ALLOC '<' TOK_STRUCT . TOK_IDENT '>' '(' ')'

    TOK_IDENT  shift, and go to state 88


State 72

   46 allocator: TOK_ALLOC '<' TOK_ARRAY . '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 89


State 73

   44 allocator: TOK_ALLOC '<' TOK_STRINGCON . '>' '(' expr ')'

    '>'  shift, and go to state 90


State 74

   43 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 43 (variable)


State 75

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   26     | expr TOK_EQ expr .
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    '+'        shift, and go to state 63
    '-'        shift, and go to state 64
    '*'        shift, and go to state 65
    '/'        shift, and go to state 66
    '%'        shift, and go to state 67
    '['        shift, and go to state 68

    $default  reduce using rule 26 (expr)


State 76

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   27     | expr TOK_NE expr .
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    '+'        shift, and go to state 63
    '-'        shift, and go to state 64
    '*'        shift, and go to state 65
    '/'        shift, and go to state 66
    '%'        shift, and go to state 67
    '['        shift, and go to state 68

    $default  reduce using rule 27 (expr)


State 77

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   28     | expr TOK_LE expr .
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    '+'        shift, and go to state 63
    '-'        shift, and go to state 64
    '*'        shift, and go to state 65
    '/'        shift, and go to state 66
    '%'        shift, and go to state 67
    '['        shift, and go to state 68

    $default  reduce using rule 28 (expr)


State 78

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   29     | expr TOK_GE expr .
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    '+'        shift, and go to state 63
    '-'        shift, and go to state 64
    '*'        shift, and go to state 65
    '/'        shift, and go to state 66
    '%'        shift, and go to state 67
    '['        shift, and go to state 68

    $default  reduce using rule 29 (expr)


State 79

   20 expr: expr . '=' expr
   20     | expr '=' expr .
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    TOK_EQ     shift, and go to state 56
    TOK_NE     shift, and go to state 57
    TOK_LE     shift, and go to state 58
    TOK_GE     shift, and go to state 59
    '='        shift, and go to state 60
    '<'        shift, and go to state 61
    '>'        shift, and go to state 62
    '+'        shift, and go to state 63
    '-'        shift, and go to state 64
    '*'        shift, and go to state 65
    '/'        shift, and go to state 66
    '%'        shift, and go to state 67
    '['        shift, and go to state 68

    $default  reduce using rule 20 (expr)


State 80

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   30     | expr '<' expr .
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    '+'        shift, and go to state 63
    '-'        shift, and go to state 64
    '*'        shift, and go to state 65
    '/'        shift, and go to state 66
    '%'        shift, and go to state 67
    '['        shift, and go to state 68

    $default  reduce using rule 30 (expr)


State 81

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   31     | expr '>' expr .
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    '+'        shift, and go to state 63
    '-'        shift, and go to state 64
    '*'        shift, and go to state 65
    '/'        shift, and go to state 66
    '%'        shift, and go to state 67
    '['        shift, and go to state 68

    $default  reduce using rule 31 (expr)


State 82

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   21     | expr '+' expr .
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    '*'        shift, and go to state 65
    '/'        shift, and go to state 66
    '%'        shift, and go to state 67
    '['        shift, and go to state 68

    $default  reduce using rule 21 (expr)


State 83

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   22     | expr '-' expr .
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    '*'        shift, and go to state 65
    '/'        shift, and go to state 66
    '%'        shift, and go to state 67
    '['        shift, and go to state 68

    $default  reduce using rule 22 (expr)


State 84

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   23     | expr '*' expr .
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    '['        shift, and go to state 68

    $default  reduce using rule 23 (expr)


State 85

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   24     | expr '/' expr .
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    '['        shift, and go to state 68

    $default  reduce using rule 24 (expr)


State 86

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   25     | expr '%' expr .
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    '['        shift, and go to state 68

    $default  reduce using rule 25 (expr)


State 87

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   42         | expr '[' expr . ']'
   43         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 55
    TOK_EQ     shift, and go to state 56
    TOK_NE     shift, and go to state 57
    TOK_LE     shift, and go to state 58
    TOK_GE     shift, and go to state 59
    '='        shift, and go to state 60
    '<'        shift, and go to state 61
    '>'        shift, and go to state 62
    '+'        shift, and go to state 63
    '-'        shift, and go to state 64
    '*'        shift, and go to state 65
    '/'        shift, and go to state 66
    '%'        shift, and go to state 67
    '['        shift, and go to state 68
    ']'        shift, and go to state 91


State 88

   45 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT . '>' '(' ')'

    '>'  shift, and go to state 92


State 89

   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' . plaintype '>' '>' '(' expr ')'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 10

    plaintype  go to state 93


State 90

   44 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' . '(' expr ')'

    '('  shift, and go to state 94


State 91

   42 variable: expr '[' expr ']' .

    $default  reduce using rule 42 (variable)


State 92

   45 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' . '(' ')'

    '('  shift, and go to state 95


State 93

   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype . '>' '>' '(' expr ')'

    '>'  shift, and go to state 96


State 94

   44 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 97
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 95

   45 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' . ')'

    ')'  shift, and go to state 98


State 96

   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' . '>' '(' expr ')'

    '>'  shift, and go to state 99


State 97

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT
   44 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr . ')'

    TOK_ARROW  shift, and go to state 55
    TOK_EQ     shift, and go to state 56
    TOK_NE     shift, and go to state 57
    TOK_LE     shift, and go to state 58
    TOK_GE     shift, and go to state 59
    '='        shift, and go to state 60
    '<'        shift, and go to state 61
    '>'        shift, and go to state 62
    '+'        shift, and go to state 63
    '-'        shift, and go to state 64
    '*'        shift, and go to state 65
    '/'        shift, and go to state 66
    '%'        shift, and go to state 67
    '['        shift, and go to state 68
    ')'        shift, and go to state 100


State 98

   45 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')' .

    $default  reduce using rule 45 (allocator)


State 99

   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' . '(' expr ')'

    '('  shift, and go to state 101


State 100

   44 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr ')' .

    $default  reduce using rule 44 (allocator)


State 101

   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 37
    TOK_ALLOC      shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    TOK_INTCON     shift, and go to state 40
    TOK_CHARCON    shift, and go to state 41
    TOK_STRINGCON  shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44

    expr       go to state 102
    constant   go to state 46
    variable   go to state 47
    allocator  go to state 48


State 102

   20 expr: expr . '=' expr
   21     | expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | expr . '%' expr
   26     | expr . TOK_EQ expr
   27     | expr . TOK_NE expr
   28     | expr . TOK_LE expr
   29     | expr . TOK_GE expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   42 variable: expr . '[' expr ']'
   43         | expr . TOK_ARROW TOK_IDENT
   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr . ')'

    TOK_ARROW  shift, and go to state 55
    TOK_EQ     shift, and go to state 56
    TOK_NE     shift, and go to state 57
    TOK_LE     shift, and go to state 58
    TOK_GE     shift, and go to state 59
    '='        shift, and go to state 60
    '<'        shift, and go to state 61
    '>'        shift, and go to state 62
    '+'        shift, and go to state 63
    '-'        shift, and go to state 64
    '*'        shift, and go to state 65
    '/'        shift, and go to state 66
    '%'        shift, and go to state 67
    '['        shift, and go to state 68
    ')'        shift, and go to state 103


State 103

   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')' .

    $default  reduce using rule 46 (allocator)

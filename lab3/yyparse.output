Terminals unused in grammar

   TOK_LT
   TOK_GT
   TOK_NOT
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_INITDECL
   TOK_TYPE_ID
   TOK_VARDECL
   TOK_INDEX


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program statement
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: sargs '}' ';'
    8          | TOK_STRUCT TOK_IDENT '{' '}' ';'

    9 sargs: sargs type TOK_IDENT ';'
   10      | TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';'

   11 statement: vardecl
   12          | block
   13          | while
   14          | expr ';'
   15          | ifelse
   16          | return

   17 vardecl: type TOK_IDENT '=' expr ';'
   18        | type TOK_IDENT ';'

   19 type: plaintype
   20     | TOK_ARRAY '<' plaintype '>'

   21 plaintype: TOK_INT
   22          | TOK_VOID
   23          | TOK_STRING
   24          | TOK_PTR '<' TOK_STRUCT TOK_IDENT '>'

   25 expr: expr '=' expr
   26     | expr '+' expr
   27     | expr '-' expr
   28     | expr '*' expr
   29     | expr '/' expr
   30     | expr '%' expr
   31     | expr TOK_EQ expr
   32     | expr TOK_NE expr
   33     | expr TOK_LE expr
   34     | expr TOK_GE expr
   35     | expr '<' expr
   36     | expr '>' expr
   37     | '-' expr
   38     | '+' expr
   39     | allocator
   40     | '(' expr ')'
   41     | call
   42     | variable
   43     | constant

   44 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr ')'
   45          | TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   46          | TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

   47 call: cargs ')'
   48     | TOK_IDENT '(' ')'

   49 cargs: TOK_IDENT '(' expr
   50      | cargs ',' expr

   51 variable: TOK_IDENT
   52         | expr '[' expr ']'
   53         | expr TOK_ARROW TOK_IDENT

   54 constant: TOK_INTCON
   55         | TOK_CHARCON
   56         | TOK_STRINGCON
   57         | TOK_NULLPTR

   58 block: bargs '}'
   59      | '{' '}'
   60      | ';'

   61 bargs: '{' statement
   62      | bargs statement

   63 while: TOK_WHILE '(' expr ')' statement

   64 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   65       | TOK_IF '(' expr ')' statement

   66 return: TOK_RETURN expr ';'
   67       | TOK_RETURN ';'


Terminals, with rules where they appear

$end (0) 0
'%' (37) 30
'(' (40) 40 44 45 46 48 49 63 64 65
')' (41) 40 44 45 46 47 48 63 64 65
'*' (42) 28
'+' (43) 26 38
',' (44) 50
'-' (45) 27 37
'/' (47) 29
';' (59) 5 7 8 9 10 14 17 18 60 66 67
'<' (60) 20 24 35 44 45 46
'=' (61) 17 25
'>' (62) 20 24 36 44 45 46
'[' (91) 52
']' (93) 52
'{' (123) 8 10 59 61
'}' (125) 4 7 8 58 59
error (256) 4 5
TOK_VOID (258) 22
TOK_INT (259) 21
TOK_STRING (260) 23
TOK_IF (261) 64 65
TOK_ELSE (262) 64
TOK_WHILE (263) 63
TOK_RETURN (264) 66 67
TOK_STRUCT (265) 8 10 24 45
TOK_NULLPTR (266) 57
TOK_ARRAY (267) 20 46
TOK_ARROW (268) 53
TOK_ALLOC (269) 44 45 46
TOK_PTR (270) 24
TOK_EQ (271) 31
TOK_NE (272) 32
TOK_LT (273)
TOK_LE (274) 33
TOK_GT (275)
TOK_GE (276) 34
TOK_NOT (277)
TOK_IDENT (278) 8 9 10 17 18 24 45 48 49 51 53
TOK_INTCON (279) 54
TOK_CHARCON (280) 55
TOK_STRINGCON (281) 44 56
TOK_ROOT (282)
TOK_BLOCK (283)
TOK_CALL (284)
TOK_INITDECL (285)
TOK_TYPE_ID (286)
TOK_VARDECL (287)
TOK_INDEX (288)
U_PLUS (289)
U_MINUS (290)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
start (53)
    on left: 1, on right: 0
program (54)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
structdef (55)
    on left: 7 8, on right: 2
sargs (56)
    on left: 9 10, on right: 7 9
statement (57)
    on left: 11 12 13 14 15 16, on right: 3 61 62 63 64 65
vardecl (58)
    on left: 17 18, on right: 11
type (59)
    on left: 19 20, on right: 9 10 17 18
plaintype (60)
    on left: 21 22 23 24, on right: 19 20 46
expr (61)
    on left: 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42
    43, on right: 14 17 25 26 27 28 29 30 31 32 33 34 35 36 37 38 40
    44 46 49 50 52 53 63 64 65 66
allocator (62)
    on left: 44 45 46, on right: 39
call (63)
    on left: 47 48, on right: 41
cargs (64)
    on left: 49 50, on right: 47 50
variable (65)
    on left: 51 52 53, on right: 42
constant (66)
    on left: 54 55 56 57, on right: 43
block (67)
    on left: 58 59 60, on right: 12
bargs (68)
    on left: 61 62, on right: 58 62
while (69)
    on left: 63, on right: 13
ifelse (70)
    on left: 64 65, on right: 15
return (71)
    on left: 66 67, on right: 16


State 0

    0 $accept: . start $end

    $default  reduce using rule 6 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . statement
    4        | program . error '}'
    5        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_STRUCT     shift, and go to state 11
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    $end  reduce using rule 1 (start)

    structdef  go to state 25
    sargs      go to state 26
    statement  go to state 27
    vardecl    go to state 28
    type       go to state 29
    plaintype  go to state 30
    expr       go to state 31
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36
    block      go to state 37
    bargs      go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41


State 3

    0 $accept: start $end .

    $default  accept


State 4

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 42
    ';'  shift, and go to state 43


State 5

   22 plaintype: TOK_VOID .

    $default  reduce using rule 22 (plaintype)


State 6

   21 plaintype: TOK_INT .

    $default  reduce using rule 21 (plaintype)


State 7

   23 plaintype: TOK_STRING .

    $default  reduce using rule 23 (plaintype)


State 8

   64 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   65       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 44


State 9

   63 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 45


State 10

   66 return: TOK_RETURN . expr ';'
   67       | TOK_RETURN . ';'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 46

    expr       go to state 47
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 11

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}' ';'
   10 sargs: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 48


State 12

   57 constant: TOK_NULLPTR .

    $default  reduce using rule 57 (constant)


State 13

   20 type: TOK_ARRAY . '<' plaintype '>'

    '<'  shift, and go to state 49


State 14

   44 allocator: TOK_ALLOC . '<' TOK_STRINGCON '>' '(' expr ')'
   45          | TOK_ALLOC . '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   46          | TOK_ALLOC . '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 50


State 15

   24 plaintype: TOK_PTR . '<' TOK_STRUCT TOK_IDENT '>'

    '<'  shift, and go to state 51


State 16

   48 call: TOK_IDENT . '(' ')'
   49 cargs: TOK_IDENT . '(' expr
   51 variable: TOK_IDENT .

    '('  shift, and go to state 52

    $default  reduce using rule 51 (variable)


State 17

   54 constant: TOK_INTCON .

    $default  reduce using rule 54 (constant)


State 18

   55 constant: TOK_CHARCON .

    $default  reduce using rule 55 (constant)


State 19

   56 constant: TOK_STRINGCON .

    $default  reduce using rule 56 (constant)


State 20

   38 expr: '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 53
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 21

   37 expr: '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 54
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 22

   40 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 55
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 23

   60 block: ';' .

    $default  reduce using rule 60 (block)


State 24

   59 block: '{' . '}'
   61 bargs: '{' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    '}'            shift, and go to state 56
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    statement  go to state 57
    vardecl    go to state 28
    type       go to state 29
    plaintype  go to state 30
    expr       go to state 31
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36
    block      go to state 37
    bargs      go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41


State 25

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 26

    7 structdef: sargs . '}' ';'
    9 sargs: sargs . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    '}'         shift, and go to state 58

    type       go to state 59
    plaintype  go to state 30


State 27

    3 program: program statement .

    $default  reduce using rule 3 (program)


State 28

   11 statement: vardecl .

    $default  reduce using rule 11 (statement)


State 29

   17 vardecl: type . TOK_IDENT '=' expr ';'
   18        | type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 60


State 30

   19 type: plaintype .

    $default  reduce using rule 19 (type)


State 31

   14 statement: expr . ';'
   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '<'        shift, and go to state 67
    '>'        shift, and go to state 68
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74
    ';'        shift, and go to state 75


State 32

   39 expr: allocator .

    $default  reduce using rule 39 (expr)


State 33

   41 expr: call .

    $default  reduce using rule 41 (expr)


State 34

   47 call: cargs . ')'
   50 cargs: cargs . ',' expr

    ')'  shift, and go to state 76
    ','  shift, and go to state 77


State 35

   42 expr: variable .

    $default  reduce using rule 42 (expr)


State 36

   43 expr: constant .

    $default  reduce using rule 43 (expr)


State 37

   12 statement: block .

    $default  reduce using rule 12 (statement)


State 38

   58 block: bargs . '}'
   62 bargs: bargs . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    '}'            shift, and go to state 78
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    statement  go to state 79
    vardecl    go to state 28
    type       go to state 29
    plaintype  go to state 30
    expr       go to state 31
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36
    block      go to state 37
    bargs      go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41


State 39

   13 statement: while .

    $default  reduce using rule 13 (statement)


State 40

   15 statement: ifelse .

    $default  reduce using rule 15 (statement)


State 41

   16 statement: return .

    $default  reduce using rule 16 (statement)


State 42

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 43

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 44

   64 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   65       | TOK_IF '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 80
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 45

   63 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 81
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 46

   67 return: TOK_RETURN ';' .

    $default  reduce using rule 67 (return)


State 47

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT
   66 return: TOK_RETURN expr . ';'

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '<'        shift, and go to state 67
    '>'        shift, and go to state 68
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74
    ';'        shift, and go to state 82


State 48

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT ';'

    '{'  shift, and go to state 83


State 49

   20 type: TOK_ARRAY '<' . plaintype '>'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 15

    plaintype  go to state 84


State 50

   44 allocator: TOK_ALLOC '<' . TOK_STRINGCON '>' '(' expr ')'
   45          | TOK_ALLOC '<' . TOK_STRUCT TOK_IDENT '>' '(' ')'
   46          | TOK_ALLOC '<' . TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    TOK_STRUCT     shift, and go to state 85
    TOK_ARRAY      shift, and go to state 86
    TOK_STRINGCON  shift, and go to state 87


State 51

   24 plaintype: TOK_PTR '<' . TOK_STRUCT TOK_IDENT '>'

    TOK_STRUCT  shift, and go to state 88


State 52

   48 call: TOK_IDENT '(' . ')'
   49 cargs: TOK_IDENT '(' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ')'            shift, and go to state 89

    expr       go to state 90
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 53

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   38     | '+' expr .
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '['        shift, and go to state 74

    $default  reduce using rule 38 (expr)


State 54

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   37     | '-' expr .
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '['        shift, and go to state 74

    $default  reduce using rule 37 (expr)


State 55

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   40     | '(' expr . ')'
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '<'        shift, and go to state 67
    '>'        shift, and go to state 68
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74
    ')'        shift, and go to state 91


State 56

   59 block: '{' '}' .

    $default  reduce using rule 59 (block)


State 57

   61 bargs: '{' statement .

    $default  reduce using rule 61 (bargs)


State 58

    7 structdef: sargs '}' . ';'

    ';'  shift, and go to state 92


State 59

    9 sargs: sargs type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 93


State 60

   17 vardecl: type TOK_IDENT . '=' expr ';'
   18        | type TOK_IDENT . ';'

    '='  shift, and go to state 94
    ';'  shift, and go to state 95


State 61

   53 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 96


State 62

   31 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 97
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 63

   32 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 98
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 64

   33 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 99
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 65

   34 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 100
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 66

   25 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 101
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 67

   35 expr: expr '<' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 102
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 68

   36 expr: expr '>' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 103
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 69

   26 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 104
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 70

   27 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 105
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 71

   28 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 106
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 72

   29 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 107
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 73

   30 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 108
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 74

   52 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 109
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 75

   14 statement: expr ';' .

    $default  reduce using rule 14 (statement)


State 76

   47 call: cargs ')' .

    $default  reduce using rule 47 (call)


State 77

   50 cargs: cargs ',' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 110
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 78

   58 block: bargs '}' .

    $default  reduce using rule 58 (block)


State 79

   62 bargs: bargs statement .

    $default  reduce using rule 62 (bargs)


State 80

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT
   64 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   65       | TOK_IF '(' expr . ')' statement

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '<'        shift, and go to state 67
    '>'        shift, and go to state 68
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74
    ')'        shift, and go to state 111


State 81

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT
   63 while: TOK_WHILE '(' expr . ')' statement

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '<'        shift, and go to state 67
    '>'        shift, and go to state 68
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74
    ')'        shift, and go to state 112


State 82

   66 return: TOK_RETURN expr ';' .

    $default  reduce using rule 66 (return)


State 83

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}' ';'
   10 sargs: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    '}'         shift, and go to state 113

    type       go to state 114
    plaintype  go to state 30


State 84

   20 type: TOK_ARRAY '<' plaintype . '>'

    '>'  shift, and go to state 115


State 85

   45 allocator: TOK_ALLOC '<' TOK_STRUCT . TOK_IDENT '>' '(' ')'

    TOK_IDENT  shift, and go to state 116


State 86

   46 allocator: TOK_ALLOC '<' TOK_ARRAY . '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 117


State 87

   44 allocator: TOK_ALLOC '<' TOK_STRINGCON . '>' '(' expr ')'

    '>'  shift, and go to state 118


State 88

   24 plaintype: TOK_PTR '<' TOK_STRUCT . TOK_IDENT '>'

    TOK_IDENT  shift, and go to state 119


State 89

   48 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 48 (call)


State 90

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   49 cargs: TOK_IDENT '(' expr .
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '<'        shift, and go to state 67
    '>'        shift, and go to state 68
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74

    $default  reduce using rule 49 (cargs)


State 91

   40 expr: '(' expr ')' .

    $default  reduce using rule 40 (expr)


State 92

    7 structdef: sargs '}' ';' .

    $default  reduce using rule 7 (structdef)


State 93

    9 sargs: sargs type TOK_IDENT . ';'

    ';'  shift, and go to state 120


State 94

   17 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 121
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 95

   18 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 18 (vardecl)


State 96

   53 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 53 (variable)


State 97

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   31     | expr TOK_EQ expr .
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74

    $default  reduce using rule 31 (expr)


State 98

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   32     | expr TOK_NE expr .
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74

    $default  reduce using rule 32 (expr)


State 99

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   33     | expr TOK_LE expr .
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74

    $default  reduce using rule 33 (expr)


State 100

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   34     | expr TOK_GE expr .
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74

    $default  reduce using rule 34 (expr)


State 101

   25 expr: expr . '=' expr
   25     | expr '=' expr .
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '<'        shift, and go to state 67
    '>'        shift, and go to state 68
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74

    $default  reduce using rule 25 (expr)


State 102

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   35     | expr '<' expr .
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74

    $default  reduce using rule 35 (expr)


State 103

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   36     | expr '>' expr .
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74

    $default  reduce using rule 36 (expr)


State 104

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   26     | expr '+' expr .
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74

    $default  reduce using rule 26 (expr)


State 105

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   27     | expr '-' expr .
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74

    $default  reduce using rule 27 (expr)


State 106

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   28     | expr '*' expr .
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '['        shift, and go to state 74

    $default  reduce using rule 28 (expr)


State 107

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   29     | expr '/' expr .
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '['        shift, and go to state 74

    $default  reduce using rule 29 (expr)


State 108

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   30     | expr '%' expr .
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '['        shift, and go to state 74

    $default  reduce using rule 30 (expr)


State 109

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   52         | expr '[' expr . ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '<'        shift, and go to state 67
    '>'        shift, and go to state 68
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74
    ']'        shift, and go to state 122


State 110

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   50 cargs: cargs ',' expr .
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '<'        shift, and go to state 67
    '>'        shift, and go to state 68
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74

    $default  reduce using rule 50 (cargs)


State 111

   64 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   65       | TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    statement  go to state 123
    vardecl    go to state 28
    type       go to state 29
    plaintype  go to state 30
    expr       go to state 31
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36
    block      go to state 37
    bargs      go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41


State 112

   63 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    statement  go to state 124
    vardecl    go to state 28
    type       go to state 29
    plaintype  go to state 30
    expr       go to state 31
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36
    block      go to state 37
    bargs      go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41


State 113

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' . ';'

    ';'  shift, and go to state 125


State 114

   10 sargs: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 126


State 115

   20 type: TOK_ARRAY '<' plaintype '>' .

    $default  reduce using rule 20 (type)


State 116

   45 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT . '>' '(' ')'

    '>'  shift, and go to state 127


State 117

   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' . plaintype '>' '>' '(' expr ')'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 15

    plaintype  go to state 128


State 118

   44 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' . '(' expr ')'

    '('  shift, and go to state 129


State 119

   24 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT . '>'

    '>'  shift, and go to state 130


State 120

    9 sargs: sargs type TOK_IDENT ';' .

    $default  reduce using rule 9 (sargs)


State 121

   17 vardecl: type TOK_IDENT '=' expr . ';'
   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '<'        shift, and go to state 67
    '>'        shift, and go to state 68
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74
    ';'        shift, and go to state 131


State 122

   52 variable: expr '[' expr ']' .

    $default  reduce using rule 52 (variable)


State 123

   64 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   65       | TOK_IF '(' expr ')' statement .

    TOK_ELSE  shift, and go to state 132

    $default  reduce using rule 65 (ifelse)


State 124

   63 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 63 (while)


State 125

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' ';' .

    $default  reduce using rule 8 (structdef)


State 126

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . ';'

    ';'  shift, and go to state 133


State 127

   45 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' . '(' ')'

    '('  shift, and go to state 134


State 128

   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype . '>' '>' '(' expr ')'

    '>'  shift, and go to state 135


State 129

   44 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 136
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 130

   24 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT '>' .

    $default  reduce using rule 24 (plaintype)


State 131

   17 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 17 (vardecl)


State 132

   64 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    statement  go to state 137
    vardecl    go to state 28
    type       go to state 29
    plaintype  go to state 30
    expr       go to state 31
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36
    block      go to state 37
    bargs      go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41


State 133

   10 sargs: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' .

    $default  reduce using rule 10 (sargs)


State 134

   45 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' . ')'

    ')'  shift, and go to state 138


State 135

   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' . '>' '(' expr ')'

    '>'  shift, and go to state 139


State 136

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   44 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr . ')'
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '<'        shift, and go to state 67
    '>'        shift, and go to state 68
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74
    ')'        shift, and go to state 140


State 137

   64 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 64 (ifelse)


State 138

   45 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')' .

    $default  reduce using rule 45 (allocator)


State 139

   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' . '(' expr ')'

    '('  shift, and go to state 141


State 140

   44 allocator: TOK_ALLOC '<' TOK_STRINGCON '>' '(' expr ')' .

    $default  reduce using rule 44 (allocator)


State 141

   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 142
    allocator  go to state 32
    call       go to state 33
    cargs      go to state 34
    variable   go to state 35
    constant   go to state 36


State 142

   25 expr: expr . '=' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '%' expr
   31     | expr . TOK_EQ expr
   32     | expr . TOK_NE expr
   33     | expr . TOK_LE expr
   34     | expr . TOK_GE expr
   35     | expr . '<' expr
   36     | expr . '>' expr
   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr . ')'
   52 variable: expr . '[' expr ']'
   53         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '<'        shift, and go to state 67
    '>'        shift, and go to state 68
    '+'        shift, and go to state 69
    '-'        shift, and go to state 70
    '*'        shift, and go to state 71
    '/'        shift, and go to state 72
    '%'        shift, and go to state 73
    '['        shift, and go to state 74
    ')'        shift, and go to state 143


State 143

   46 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')' .

    $default  reduce using rule 46 (allocator)

/* structure tests */

// struct test{};
// struct onearg{int trivial;};
// struct testptr { ptr <struct test > homura; };
// struct testarray { array <ptr <struct test >> sayaka; };
// struct allofem { int one;
//                  string two;
//                  void three;
//                  ptr <struct test > homura; 
//                  array <ptr <struct test >> sayaka;
// 	        };

/* vardecl tests */

string test = "aaaa\0\n\t\\bbbbbb";
string ok = "asdffadasdffasfjkjzj";
// int one;
// int two = -5*+3+0xDEADBEEF/5%01231235;
// int test = test -> fk;
// int test2 = ye;
// int test3 = test[5];
// string test4 = alloc < string > (5);
// string test5 = alloc < struct homura > ();
// string test5 = alloc < array<string> > (5);
// int test = (-5+5)*3;
// int test = -5+5*3;
// int test = ami();

/* test a wide range of expressions in a function call  */

// int test2 = homu(
//       5+5,
//       -5,
// 		 alloc < string >(5), 
// 		 alloc < struct homura >(),
// 		 alloc < array<string> > (5),
// 		 meta(5,"stringcon"), 
// 		 (5*5), 
// 		 test, 
// 		 test[5],
// 		 test->homura, 
// 		 5, 
// 		 'c', 
// 		 "stringcon", 
// 		 nullptr
// 		);

/* block tests */

// {}
// {;}
// {
//   int one;
//   int two = -5*+3+0xDEADBEEF/5%01231235;
//   int test = test -> fk;
//   int test2 = ye;
//   int test3 = test[5];
// }

/* statement tests */

/* dangling else */
// if (argc == 1)
// if (argv == 2) mid = mid + 1;
// else inc = inc + 1;
// else dec = dec + 1;

/* ifelse block statement */
// if (argc == 1) {
//   if (test == aident) {
//     while (inc==5 ) { 
//       inc = inc + 1;
//     }
//     putstr ("foo");
//     int one = 5;
//     if (test == say) 
//       putstr ("bar");
//     else putstr ("belse");
//   }
//   else putstr ("baz");
// }
// else 
//   test = homura;

/* function tests */

// int trivial () {}
// int test () {
//   int one;
//   int two = -5*+3+0xDEADBEEF/5%01231235;
// }


// int parameters (int test, string foo, int ye) {
//  int one;
//  int two = -5*+3+0xDEADBEEF/5%01231235;
//  int test = test -> fk;
//  int test2 = ye;
//  int test3 = test[5];
//  string test4 = alloc < string > (5);
//  string test5 = alloc < struct homura > ();
//  string test5 = alloc < array<string> > (5);
//  int test = (-5+5)*3;
//  int test = -5+5*3;
//  int test = ami();
//  /* test a wide range of expr ..  */
//  int test2 = homu(
//  5+5,
//  -5,
//  alloc < string >(5), 
//  alloc < struct homura >(),
//  alloc < array<string> > (5),
//  meta(5,"stringcon"), 
//  (5*5), 
//  test, 
//  test[5],
//  test->homura, 
//  5, 
//  'c', 
//  "stringcon", 
//  nullptr
//  );
// }

/* error throwing stuff */
// string notclosed = "a;
// string notvalid = "\a\basdffdsk";
